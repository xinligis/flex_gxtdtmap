<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:sho="com.esri.viewer.components.sho.ui.*"
		 width="100%" height="100%" 
		 xmlns:esri="http://www.esri.com/2008/ags"
		 xmlns:componet="com.esrichina.om.componet.*" 
		 xmlns:validPanel="com.esri.viewer.components.validPanel.*"
		 xmlns:customskinbutton="com.esri.viewer.components.customskinbutton.*" 
		 xmlns:components="com.esri.viewer.components.*">
	<fx:Script>
		<![CDATA[
			import com.esri.ags.FeatureSet;
			import com.esri.ags.Graphic;
			import com.esri.ags.Map;
			import com.esri.ags.SpatialReference;
			import com.esri.ags.events.DrawEvent;
			import com.esri.ags.geometry.MapPoint;
			import com.esri.ags.geometry.Polyline;
			import com.esri.ags.layers.GraphicsLayer;
			import com.esri.ags.tasks.QueryTask;
			import com.esri.ags.tasks.supportClasses.BufferParameters;
			import com.esri.ags.tasks.supportClasses.Query;
			import com.esri.ags.tools.DrawTool;
			import com.esri.ags.utils.GeometryUtil;
			import com.esri.ags.utils.GraphicUtil;
			import com.esrichina.publictransportation.*;
			
			import mx.collections.ArrayCollection;
			import mx.collections.IList;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.rpc.AsyncResponder;
			import mx.rpc.Fault;
			import mx.utils.StringUtil;
			
			import spark.events.IndexChangeEvent;
			import spark.utils.TextFlowUtil;
			
			
			private const ICON_URL:String = "assets/images/transfer/";
			private var _map:Map;
			public function get map():Map
			{
				return _map;
			}
			public function set map(value:Map):void
			{
				_map = value;
				if(validPanel)
				{
					validPanel.map = _map;
				}
				drawTool.map = _map;
			}
			private var _configXML:XML;
			private var _busTransferUrl:String;
			
			[Bindable]
			private var _zoomlevel:int = 0;
			
			/**
			 * 是否取消
			 **/
			private var _cancled:Boolean = false;
			
			public function set configXML(value:XML):void
			{
				_configXML = value;
				if(!_configXML)
				{
					return;
				}
				_busTransferUrl = configXML.bustransfer.@url +  configXML.bustransfer.soe.@url;
				var nameField:String = configXML.poi.displayfield;
				if(validPanel)
				{
					validPanel.poiDisplayField = nameField;
				}
				this.myGeometryService.concurrency = "last";
				this.myGeometryService.url = configXML.geometryservice;
				_zoomlevel = int(configXML.zoomlevel);
			}
			public function get configXML():XML
			{
				return _configXML;
			}
			
			/**
			 * 智能提示的状态
			 */
			private var _tipPrefix:String = "";

			/**
			 * 图形显示图层
			 */
			private var _resultsLayer:GraphicsLayer;
			public function set resultsLayer(value:GraphicsLayer):void
			{
				_resultsLayer = value;
			}
			/**
			 * 起始站点信息{name,oid,graphic}，王红亮，2012-7-19
			 */
			private var _startPOIInfo:Object;
			/**
			 * 终止站点信息{name,oid,graphic}，王红亮，2012-7-19
			 */
			private var _endPOIInfo:Object;

			/**
			* 功能：查询BusStop名称中以name开头的所有地物,出发地点
			* @param name,名称的开头部分；
			* @author：王红亮，2012-7-17
			* @return 无
			*/
			private function queryStartBusStopPartialName(control: CompletionInput, prefix: String) : void
			{
				if(!configXML || !(configXML.poi[0]))
				{	
					//return CompletionInput.COMPLETION_FAILED;
					return;
				}
				
				if(_tipPrefix != "")
				{
					_tipPrefix = prefix;
					//return CompletionInput.COMPLETION_ASYNC;
					return;
				}
				_tipPrefix = prefix;
				//重置出发地点的信息
				_startPOIInfo = new Object();
				_startPOIInfo.name = prefix;
				
				var url:String = configXML.poi.url;
				var displayField:String = configXML.poi.displayfield;
				var oidField:String = configXML.poi.oidfield;
				var strExpr:String = configXML.poi.expression;
				var queryTask:QueryTask = new QueryTask(url);
				queryTask.useAMF = true;
				var query:Query = new Query();
				query.returnGeometry = false;
				query.outFields = [displayField, oidField];
				strExpr = strExpr.toLowerCase();
				query.where = strExpr.replace("[value]", prefix);
				queryTask.execute(query, new AsyncResponder(onResult, onFault, [control, displayField, oidField]));
				
				//return CompletionInput.COMPLETION_SUCCEEDED;
				return;
				// on result
				function onResult(featureSet:com.esri.ags.FeatureSet, token:Object = null):void
				{
					var currentInput:CompletionInput = token[0] as CompletionInput;
					
					if(_tipPrefix != prefix)
					{
						var strTemp:String = _tipPrefix;
						_tipPrefix = "";
						queryStartBusStopPartialName(currentInput, strTemp);
						return;
					}
					
					try
					{
						var resultArray:Array = [];
						var len:uint = featureSet.features.length;
						len = len > 30 ? 30 : len;
						var graphic:Graphic;
						for(var index:uint = 0; index < len; ++index)
						{
							graphic = featureSet.features[index];
							var item:Object = {name:graphic.attributes[token[1]], oid:graphic.attributes[token[2]]};
							var info:Object = {item:item, label:item.name, index:index};
							resultArray.push(info);
						}
						if(resultArray.length > 0)
						{
							currentInput.completions = resultArray;
							currentInput.displayCompletions(0);
						}
						else
						{
							
						}
					}
					catch (error:Error)
					{
						
					}
					
					_tipPrefix = "";
				} 
				
				function onFault(fault:Fault, token:Object = null):void
				{
					
				}
			}
			

			/**
			 * 后处理操作
			 **/
			public function postProcess(data:Object):void
			{
				_resultsLayer.clear();
				setValidStartGraphic(data.startGraphic as Graphic, data.startName);
				setValidEndGraphic(data.toGraphic as Graphic, data.toName);
				
				doSearch();
			}
			
			protected function startInput_selectionChangeHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				_startPOIInfo = startInput.selectedItem;
			}
			
			protected function endInput_selectionChangeHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				_endPOIInfo = endInput.selectedItem;
				
			}
			
			/**
			*功能：查询BusStop名称中以name开头的所有地物,目的地
			*@param name,名称的开头部分；
			* @author：王红亮，2012-7-17
			* @return 无
			*/
			private function queryEndBusStopPartialName(control: CompletionInput, prefix: String) : int 
			{
				if(!configXML || !(configXML.poi[0]))
				{	
					return CompletionInput.COMPLETION_FAILED;
				}
				
				if(_tipPrefix != "")
				{
					_tipPrefix = prefix;
					return CompletionInput.COMPLETION_ASYNC;
				}
				_tipPrefix = prefix;
				//重置目的地的信息
				_endPOIInfo = new Object();
				_endPOIInfo.name = prefix;
				
				var url:String = configXML.poi.url;
				var displayField:String = configXML.poi.displayfield;
				var oidField:String = configXML.poi.oidfield;
				var strExpr:String = configXML.poi.expression;
				var queryTask:QueryTask = new QueryTask(url);
				queryTask.useAMF = true;
				var query:Query = new Query();
				query.returnGeometry = false;
				query.outFields = [displayField, oidField];
				strExpr = strExpr.toLowerCase();
				query.where = strExpr.replace("[value]", prefix);
				queryTask.execute(query, new AsyncResponder(onResult, onFault, [control, displayField, oidField]));
				
				return CompletionInput.COMPLETION_ASYNC;
				// on result
				function onResult(featureSet:com.esri.ags.FeatureSet, token:Object = null):void
				{
					var currentInput:CompletionInput = token[0] as CompletionInput;
					if(_tipPrefix != prefix)
					{
						var strTemp:String = _tipPrefix;
						_tipPrefix = "";
						queryEndBusStopPartialName(currentInput, strTemp);
						return;
					}
					
					try
					{
						var resultArray:Array = [];
						var len:uint = featureSet.features.length;
						len = len > 30 ? 30 : len;
						var graphic:Graphic;
						for(var index:uint = 0; index < len; ++index)
						{
							graphic = featureSet.features[index];
							var item:Object = {name:graphic.attributes[token[1]], oid:graphic.attributes[token[2]]};
							var info:Object = {item:item, label:item.name, index:index};
							resultArray.push(info);
						}
						
						if(resultArray.length > 0)
						{
							currentInput.completions = resultArray;
							currentInput.displayCompletions(0);
						}
						else
						{
							
						}
					}
					catch (error:Error)
					{
						
					}
					
					_tipPrefix = "";
				} 
				function onFault(fault:Fault, token:Object = null):void
				{
					
				}
			}

			/**
			 * 切换起止点
			 */
			private function onClickAlterInputPoint(event:MouseEvent):void
			{
				
				var startAtTempName:String = startInput.text;
				startInput.text = endInput.text;
				endInput.text = startAtTempName;
							
				var temp:Object = _startPOIInfo;
				_startPOIInfo = _endPOIInfo;
				_endPOIInfo = temp;
				//更新符号，即地图上起止点交换
				if(_startPOIInfo && _startPOIInfo.graphic)
				{
					_startPOIInfo.graphic.symbol = startPointSymbol;
				}
				if(_endPOIInfo && _endPOIInfo.graphic)
				{
					_endPOIInfo.graphic.symbol = endPointSymbol;
				}
			}

			/**
			 * 设置确切的出发地点
			 * 王红亮，2012-8-2
			 **/
			private function setValidStartGraphic(graphic:Graphic,name:String):void
			{
				if(_startPOIInfo == null)
				{
					_startPOIInfo = new Object();
				}
				else if(_startPOIInfo.graphic)
				{
					_resultsLayer.remove(_startPOIInfo.graphic);
				}
				_startPOIInfo.graphic = graphic;
				if(graphic)
				{
					_startPOIInfo.graphic.symbol = startPointSymbol;
					_resultsLayer.add(_startPOIInfo.graphic);
				}
				_startPOIInfo.name = name;
				startInput.text = name;
				startInput.setStyle("fontWeight","normal");
			}
			
			/**
			 * 设置确切的目的地
			 * 王红亮修改，2012-8-2
			 **/
			private function setValidEndGraphic(graphic:Graphic,name:String):void
			{
				if(_endPOIInfo == null)
				{
					_endPOIInfo = new Object();
				}
				else if(_endPOIInfo.graphic)
				{
					_resultsLayer.remove(_endPOIInfo.graphic);
				}
				_endPOIInfo.graphic = graphic;
				if(graphic)
				{
					_endPOIInfo.graphic.symbol = endPointSymbol;
					_resultsLayer.add(_endPOIInfo.graphic);
				}
				_endPOIInfo.name = name;
				endInput.text = name;
				endInput.setStyle("fontWeight","normal");
			}
			
			private function search_clickHandler(event:MouseEvent):void
			{
				if(!_startPOIInfo)
				{
					_startPOIInfo = new Object();
					_startPOIInfo.name = startInput.text;
				}
				if(!_endPOIInfo)
				{
					_endPOIInfo = new Object();
					_endPOIInfo.name = endInput.text;
				}
				doSearch();
			}
			
			private function doSearch():void
			{
				_cancled = false;
				_resultsLayer.clear();
				map.infoWindow.hide();
				if(_transferItems)
				{
					_transferItems.removeAll();
				}
				if(startInput.text  == "")
				{
					mx.controls.Alert.show("出发地点不能为空！");
					currentState = "normal";
					return;
				}
				
				if(endInput.text == "")
				{
					mx.controls.Alert.show("目的地不能为空！");
					currentState = "normal";
					return;
				}
				currentState = "loading";
				if(_startPOIInfo.graphic == null || startInput.text != _startPOIInfo.name)
				{
					//需要验证出发地点POI
					_startPOIInfo.name = startInput.text;
					validPOI(true);
					if(_endPOIInfo.graphic != null && endInput.text == _endPOIInfo.name)
					{
						_resultsLayer.add(_endPOIInfo.graphic);
					}
					return;
				}
				_resultsLayer.add(_startPOIInfo.graphic);
				if(_startPOIInfo.graphic == null && _startPOIInfo.oid != null)
				{
					//根据id获取起始兴趣点的几何图形
					queryPOIGraphic(true);
					return;
				}
				if(_endPOIInfo.graphic == null || endInput.text != _endPOIInfo.name)
				{
					//需要验证目的地POI
					_endPOIInfo.name = endInput.text;
					validPOI(false);
					return;
				}
				_resultsLayer.add(_endPOIInfo.graphic);
				if(_endPOIInfo.graphic == null && _endPOIInfo.oid != null)
				{
					//根据id获取起始兴趣点的几何图形
					queryPOIGraphic(false);
					return;
				}
				//查找换乘方案
				excuteFindBusRout(_startPOIInfo.graphic.geometry as MapPoint, _endPOIInfo.graphic.geometry as MapPoint);
			}
			
			/**
			 * 验证POI点，从多个可选之中选择一个
			 * @param isStart true 出发地点；false 目的地
			 */
			private function validPOI(isStart:Boolean):void
			{
				var query:Query = new Query();
				var task:QueryTask = new QueryTask(String(configXML.poi.url));
				var oidField:String = configXML.poi.oidfield || "OBJECTID";
				task.useAMF = true;
				query.returnGeometry = false;
				query.outFields = [oidField];
				var strExpr:String = String(configXML.poi.expression).toLowerCase();
				var value:String = isStart ? _startPOIInfo.name : _endPOIInfo.name;
				query.where = strExpr.replace("[value]", value);
				task.execute(query,	new AsyncResponder(onResult,onFault, oidField));
				
				function onResult(result:FeatureSet,token:Object = null):void
				{
					if(_cancled)
					{
						return;
					}
					var ids:Array = [];
					
					var len:uint = result.features.length;
					var graphic:Graphic;
					for(var index:int = 0; index < len; index++)
					{
						graphic = result.features[index];
						ids.push(graphic.attributes[token]);
					}
					if(ids.length<1)
					{
						if(isStart)
						{
							invalidStartKeyWords();
						}
						else
						{
							invalidEndKeyWords();
						}
						currentState = "normal";
						return;
					}
					else if(ids.length == 1)
					{
						if(isStart)
						{
							_startPOIInfo.oid = ids[0];
						}
						else
						{
							_endPOIInfo.oid = ids[0];
						}
						queryPOIGraphic(isStart);
						return;
					}
					currentState = "select";
					if(isStart)
					{
						validPanel.invalidType = ValidPanel.INVALID_TYPE_START;
					}
					else
					{
						validPanel.invalidType = ValidPanel.INVALID_TYPE_END;
					}
					validPanel.poiIds = ids;
				}
				function onFault(fault:Object,token:Object = null):void
				{
					
				}
			}
			
			/**获取兴趣点的几何图形
			 *@param isStart true 出发地点；false 目的地
			 */
			private function queryPOIGraphic(isStart:Boolean):void
			{
				var task:QueryTask = new QueryTask(String(configXML.poi.url));
				task.useAMF = true;
				var query:Query = new Query();
				var oidField:String = configXML.poi.oidfield || "OBJECTID";
				var displayField:String = String(configXML.poi.displayfield)
				query.returnGeometry = true;
				query.outFields = [oidField,displayField];
				if(isStart)
				{
					query.where = oidField + "=" + _startPOIInfo.oid;
				}
				else
				{
					query.where = oidField + "=" + _endPOIInfo.oid;
				}
				task.execute(query,	new AsyncResponder(onResult,onFault, isStart));
				function onResult(result:FeatureSet, token:Object = null):void
				{
					if(_cancled)
					{
						return;
					}
					var start:Boolean = token as Boolean;
					if(result.features.length > 0)
					{
						var displayfield:String = String(configXML.poi.displayfield);
						if(start == true)
						{
							setValidStartGraphic(result.features[0],result.features[0].attributes[displayfield]);
						}
						else
						{						
							setValidEndGraphic(result.features[0],result.features[0].attributes[displayfield]);
						}
						
						doSearch();
					}
					else
					{
						mx.controls.Alert.show("无法获取" + (token == true ? "出发地点" : "目的地") + "准确位置", "目标无效");
					}
				}
				
				function onFault(fault:Fault, token:Object = null):void
				{
					mx.controls.Alert.show("无法获取" + (token == true ? "出发地点" : "目的地") + "准确位置", "目标无效");
				}
			}
			
			/**
			 * 无效的出发地点查询关键字
			 **/
			private function invalidStartKeyWords():void
			{
				//startInput.setStyle("color","0xff0000");
				startInput.setStyle("fontWeight","bold");
				startInput.text = "查询关键字无效";
			}
			
			private function invalidEndKeyWords():void
			{
				//endInput.setStyle("color","0xff0000");
				endInput.setStyle("fontWeight","bold");
				endInput.text = "查询关键字无效";
			}
					
			private function excuteFindBusRout(startPoint:MapPoint, endPoint:MapPoint):void
			{
				if(!startPoint || !endPoint)
					return;
				if(_cancled)
				{
					return;
				}
				var busTask:TransportationTask = new TransportationTask();
				busTask.url = this._busTransferUrl;
				var parameters:TransferParameters = new TransferParameters();
				parameters.departure = startPoint;
				parameters.destination = endPoint;
				parameters.inSR = map.spatialReference;
				
				switch(transferOptionBar.selectedIndex)//较快捷
				{
					case 0:
						parameters.prior = TransferParameters.PRIOR_TIME;
						break;
					case 1:
						parameters.prior = TransferParameters.PRIOR_COUNT;
						break;
					case 2:
						parameters.prior = TransferParameters.PRIOR_WALK;
						break;
					default:
						parameters.prior = TransferParameters.PRIOR_TIME;
						break;
				}				
				busTask.transfer(parameters, new AsyncResponder(onBusTransportationSolveResult, onBusTransferFault, null));
			}
			private var _lastTransferResult:TransferResult;
			[Bindable]
			private var _transferItems:ArrayCollection;
			private function onBusTransportationSolveResult(result:TransferResult, token:Object = null):void
			{

//				_resultsLayer.clear();
				if(_cancled)
				{
					return;
				}
				currentState = "normal";
				_lastTransferResult = result;
				var busTransfers:Array = result.allWays;
				if(result.count == 0)
				{
					noResultAlert();
					return;
				}
				var items:Array = [];
				for(var i:int = 0 ; i < busTransfers.length ; i++)
				{
					var way:Way = busTransfers[i];
					var transferItem:TransferItem = new TransferItem();
					transferItem.index = i + 1;
					transferItem.transfers = way.directions;
					//耗用的总时间
					transferItem.timeCost = way.time;
					transferItem.startName = startInput.text;
					transferItem.endName = endInput.text;
					transferItem.generalInfo = mx.utils.StringUtil.substitute("{0}公里，{1}",
						way.kilometers, 
						way.count > 0 ? "换乘" + way.count + "次" : "直达");
					items.push(transferItem);
				}
				_transferItems = new ArrayCollection(items);
				//默认显示第一种方案的详细信息
				if(items.length > 0)
				{
					this.transfersList.selectedIndex = 0;
					this.wayDetail(0);
				}
			}
			
			protected function transferOptionBar_changeHandler(event:IndexChangeEvent):void
			{
				//查找换乘方案
				excuteFindBusRout(_startPOIInfo.graphic.geometry as MapPoint, _endPOIInfo.graphic.geometry as MapPoint);
			}
			
			private function onBusTransferFault(result:Fault, token:Object = null):void
			{
				currentState = "normal";
				trace(result.toString());
				noResultAlert(result.faultString);
			}
			
			/**
			 * 没有结果的提示
			 **/
			private function noResultAlert(message:String = null):void
			{
				if(!message)
				{
				Alert.show("没有解决方案");
				}
				else
				{
					Alert.show(message, "没有解决方案");
				}
			}
			
			protected function validPanel_queryDetailHandler(event:Event):void
			{
				if(_cancled)
				{
					true;
				}
				queryDetailPoisByIds(validPanel.currentPoiIds);
			}
			
			private function queryDetailPoisByIds(ids:Array):void
			{
				var url:String = configXML.poi.url;
				
				var strExpr:String = String(configXML.poi.expression).toLowerCase();
				var value:String = validPanel.invalidType == ValidPanel.INVALID_TYPE_START ? _startPOIInfo.name : _endPOIInfo.name;
				var queryTask:QueryTask = new QueryTask(url);
				queryTask.useAMF = true;
				var query:Query = new Query();
				query.returnGeometry = true;
				var oidField:String = configXML.poi.oidfield || "OBJECTID";
				var nameField:String = configXML.poi.displayfield;
				query.outFields = [oidField, nameField];
				query.objectIds = ids;
				query.where = strExpr.replace("[value]", value);
				queryTask.execute(query, new AsyncResponder(onResult, onFault));
				queryTask.execute(query,
					new AsyncResponder(onResult,onFault));
				function onResult(result:FeatureSet,token:Object = null):void
				{
					if(_cancled)
					{
						return;
					}
					currentState = "select";
					validPanel.setPoiDatas(result);
				}
				function onFault(fault:Object,token:Object = null):void
				{
					
				}
			}
			
			protected function validPanel_selectPOIHandler(event:Event):void
			{
				var oidField:String = configXML.poi.oidfield;
				var displayfield:String = configXML.poi.displayfield;
				if(validPanel.invalidType == ValidPanel.INVALID_TYPE_START)
				{
					setValidStartGraphic(validPanel.selectedPOI,validPanel.selectedPOI.attributes[displayfield]);
					doSearch();
				}
				else
				{
					currentState = "normal";
					setValidEndGraphic(validPanel.selectedPOI,validPanel.selectedPOI.attributes[displayfield]);
					doSearch();
				}
				
			}
			
			
			protected function validPanel_initializeHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				validPanel.map = this._map;
				if(configXML)
				{
					var nameField:String = configXML.poi.displayfield;
					validPanel.poiDisplayField = nameField;
				}
			}

			
			protected function transfersList_initializeHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				transfersList.addEventListener("showTransferStop", transfersList_showTransferStopHandler);
			}
			
			private function transfersList_showTransferStopHandler(event:Event):void
			{
				var transferItem:TransferItemRenderer = event.target as TransferItemRenderer;
				showStopGraphicInfo(transferItem.segmentItem.graphic);
			}
			
			protected function transfersList_changeHandler(event:IndexChangeEvent):void
			{
				// TODO Auto-generated method stub
				wayDetail(transfersList.selectedIndex);
			}
			/**
			 * 向服务器查询换乘方案的详细信息
			 * @param index 方案的索引号
			 */
			private function wayDetail(index:int):void
			{
				if(_lastTransferResult == null 
					|| _lastTransferResult.allWays == null
					|| _lastTransferResult.allWays.length <= index
					|| index < 0)
				{
					return;
				}
				var transferItem:TransferItem = this._transferItems.getItemAt(index) as TransferItem;
				if(transferItem.segments && transferItem.segments.length > 0)
				{
					showTransferGraphics(transferItem);
					return;
				}
				var way:Way = this._lastTransferResult.allWays[index];
				var parameters:WayDetailParameters = new WayDetailParameters();
				parameters.clusterIds = way.clusterIds;
				parameters.routeExtIds = way.routeExtIds;
				parameters.departure = this._startPOIInfo.graphic.geometry;
				parameters.destination = this._endPOIInfo.graphic.geometry;
				parameters.outSR = map.spatialReference;
				var busTask:TransportationTask = new TransportationTask();
				busTask.url = this._busTransferUrl;
				busTask.wayDetail(parameters, new AsyncResponder(onWayDetailResult, onBusTransferFault, transferItem));
			}
			private function onWayDetailResult(result:WayDetailResult, token:Object = null):void
				{
				if(!result.segments || result.segments.length < 1)
					{
					return;
				}
				var transferItem:TransferItem = token as TransferItem;
				transferItem.firstWalkSegment = result.segments[0];
				var array:Array = [];
				var segmentIndex:int = 1;
				XML.ignoreWhitespace = false;
				var stationCount:int = 0;
				for(var i:int = 1; i < result.segments.length; i += 1)
				{
					var segment:Segment = result.segments[i];
					var xml:XML = <div lineHeight='17' paragraphSpaceAfter='15'/>;
					var graphic:Graphic = segment.fromStation;
					var name:String = graphic ? graphic.attributes.name : "";
					var paramXML:XML = <p fontFamily="宋体" fontSize="12"><span color="#4061ad" fontWeight="bold">{name}</span></p>;
					if(segment.type == Segment.TYPE_TRANSPORTATION)
					{
						var busSegment:TransportationSegment = segment as TransportationSegment;
						var buses:String = busSegment.routeName;
						if(busSegment.mergedRouteNames && busSegment.mergedRouteNames.length > 0)
						{
							buses += "（或" + busSegment.mergedRouteNames.join("/") + "）";
						}
						var childXML:XML = <xml><span>  乘坐  </span>
						<span color="#4061ad">{buses}</span>
						<span color="#8c8e92">（经{busSegment.stationCount}站|{busSegment.time}分钟）</span>
						<span>  至</span></xml>;
						paramXML.appendChild(childXML.children());
						stationCount += busSegment.stationCount;
						}
					else if(segment.type == Segment.TYPE_WALK)
						{
						var walkSegment:WalkSegment = segment as WalkSegment;
						if(walkSegment.exit && walkSegment.exit.attributes)
							{
							paramXML.appendChild(<span>（{walkSegment.exit.attributes.name}出）</span>);
							}
						if(isNaN(walkSegment.meters) || walkSegment.meters == 0)
							{
							paramXML.appendChild(<span>  步行至</span>);
							}
						else
						{
							var walkXML:XML = <xml><span>  步行  </span>
							<span color="#8c8e92">{walkSegment.meters}米</span>
							<span>  至</span></xml>;
							paramXML.appendChild(walkXML.children());
						}
							}
					xml.appendChild(paramXML);
					var segmentItem:SegmentItem = new SegmentItem();
					segmentItem.index = segmentIndex;
					segmentItem.description = TextFlowUtil.importFromXML(xml);
					segmentItem.graphic = graphic;
					segmentItem.segment = segment;
					array.push(segmentItem);
					
					segmentIndex += 1;
						}
						
				transferItem.segments = new ArrayCollection(array);
				transferItem.generalInfo = StringUtil.substitute("途经{0}站，", stationCount) + transferItem.generalInfo;
				showTransferGraphics(transferItem);
					}
			/**
			 * 在地图上显示当前选择的换乘方案的图形信息
			 */
			private function showTransferGraphics(transferItem:TransferItem):void
					{
				_resultsLayer.clear();
				if(_lastTransferResult == null || transferItem == null)
				{
					return;
				}
				var lineGraphic:Graphic;
				//出发地点到第一个站点的步行路段
				if(transferItem.firstWalkSegment && transferItem.firstWalkSegment.track)
						{
					lineGraphic = new Graphic(transferItem.firstWalkSegment.track);
					lineGraphic.symbol = walkSegmentSymbol;	
							_resultsLayer.add(lineGraphic);
						}	
				var stopGraphic:Graphic;

				var segment:Segment;
				var indicator:int = 1;
				for each(var segmentItem:SegmentItem in transferItem.segments)
				{
					segment = segmentItem.segment;
					if(!segment || !segment.track)
					{
						continue;
					}
					lineGraphic = new Graphic(segment.track);

					if(segment.type == Segment.TYPE_TRANSPORTATION)
					{
						lineGraphic.symbol = (indicator % 2 > 0) ? oddBusSegmentSymbol : evenBusSegmentSymbol;
						indicator += 1;
					}
					else if(segment.type == Segment.TYPE_WALK)
					{
						lineGraphic.symbol = walkSegmentSymbol;	
					}
					_resultsLayer.add(lineGraphic);
				}
				
				////////////////////////////////////////////////////////////////////////
				//绘制站点图形
				///////////////////////////////////////////////////////////////////////
				var stopGraphics:Array = [];
				//起始兴趣点
				_resultsLayer.add(_startPOIInfo.graphic);
				stopGraphics.push(_startPOIInfo.graphic);
				//目标兴趣点
				_resultsLayer.add(_endPOIInfo.graphic);
				stopGraphics.push(_endPOIInfo.graphic);
				var lastGraphic:Graphic = null;
				for each(segmentItem in transferItem.segments)
					{
					segment = segmentItem.segment;
					if(!segment || segment.type != Segment.TYPE_TRANSPORTATION)
						{
						continue;
						}
					if(segment.fromStation && segment.fromStation.geometry
						&& (!lastGraphic || lastGraphic.attributes.id != segment.fromStation.attributes.id))
					{
						segment.fromStation.symbol = stopSymbol;
						_resultsLayer.add(segment.fromStation);
						if(segment.fromStation.hasEventListener(MouseEvent.CLICK) == false)
						{
							segment.fromStation.addEventListener(MouseEvent.CLICK, stopGraphic_clickHandler);
					}
						stopGraphics.push(segment.fromStation);
						lastGraphic = segment.fromStation;
				}
					if(!segment.toStation || !segment.toStation.geometry)
				{
						continue;
					}
					if(!lastGraphic || lastGraphic.attributes.id != segment.toStation.attributes.id)
					{
						segment.toStation.symbol = stopSymbol;
						_resultsLayer.add(segment.toStation);
						if(segment.toStation.hasEventListener(MouseEvent.CLICK) == false)
						{
							segment.toStation.addEventListener(MouseEvent.CLICK, stopGraphic_clickHandler);
						}
						stopGraphics.push(segment.toStation);
						lastGraphic = segment.toStation;
					}
				}
				
				map.extent = com.esri.ags.utils.GraphicUtil.getGraphicsExtent(stopGraphics).expand(1.5);

			}
			
			private function stopGraphic_clickHandler(event:MouseEvent):void
			{
				var graphic:Graphic = event.currentTarget as Graphic;
				showStopGraphicInfo(graphic);
			}
			/**
			 * 以infowindow显示公交站点的名称信息
			 */
			private function showStopGraphicInfo(graphic:Graphic):void
			{
				infoNameLabel.text = graphic.attributes.name;
				map.infoWindow.content = infoNameLabel;
				map.infoWindow.show(graphic.geometry as MapPoint);
			}
			
			protected function cancleButton_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				_cancled = true;
				currentState = "normal";
			}
			
			protected function cleanButton_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				_resultsLayer.clear();
				startInput.text = "";
				endInput.text = "";
				_startPOIInfo = new Object();
				_endPOIInfo = new Object();
				map.infoWindow.hide();
				if(_transferItems != null)
				{
					_transferItems.removeAll();
				}
			}
			
			/**
			 * 是否正在拾取出发地点，true，正在拾取；false正在拾取目的地
			 */
			private var _isPickingStart:Boolean;
			/**
			 * 在地图上使用鼠标拾取出发地点，
			 * 王红亮 2012-8-2
			 */
			protected function startPickImage_clickHandler(event:MouseEvent):void
			{
				_isPickingStart = true;
				drawTool.activate(DrawTool.MAPPOINT);
			}
			
			/**
			 * 在地图上使用鼠标拾取目的地
			 * 王红亮 2012-8-2
			 */
			protected function endPickImage_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				_isPickingStart = false;
				drawTool.activate(DrawTool.MAPPOINT);
			}
			
			protected function drawTool_drawEndHandler(event:DrawEvent):void
			{
				drawTool.deactivate();
				if(_isPickingStart)
				{
					this.setValidStartGraphic(event.graphic, "出发地点");
				}
				else
				{
					this.setValidEndGraphic(event.graphic, "目的地");
				}
			}
			
			/**
			 * widget关闭的操作
			 **/
			public function widgetClose():void
			{
				//当公交换乘页面关闭后，隐藏验证页面图层
				if(validPanel)
					validPanel.switchLayer(false);
			}
			
			/**
			 * widget打开的操作
			 **/
			public function widgetOpen():void
			{
				//当公交换乘页面打开后，打开验证页面图层
				if(validPanel)
					validPanel.switchLayer(true);
			}
			
			protected function validPanel_cancelSelectHandler(event:Event):void
			{
				// TODO Auto-generated method stub
				currentState = "normal";
				_cancled = true;
			}
			
		]]>
	</fx:Script>
	<s:layout>
		<s:VerticalLayout paddingLeft="15" paddingRight="15" gap="10"/>
	</s:layout>
	<fx:Declarations>
		<esri:PictureMarkerSymbol id="stopSymbol" source="{ICON_URL + 'iBus.png'}"/>
		<esri:PictureMarkerSymbol id="startPointSymbol" source="{ICON_URL + 'iStartpoint.png'}"/>
		<esri:PictureMarkerSymbol id="endPointSymbol" source="{ICON_URL + 'iEndpoint.png'}"/>
		<!--步行的路段符号-->
		<esri:SimpleLineSymbol id="walkSegmentSymbol" color="0x00ff00" width="4" style="{SimpleLineSymbol.STYLE_DASH}"/>
		<!--奇数公交段符号，区别于偶数段-->
		<esri:SimpleLineSymbol id="oddBusSegmentSymbol" color="0xFF0000" width="4"/>
		<!--偶数公交段符号，区别于奇数段-->
		<esri:SimpleLineSymbol id="evenBusSegmentSymbol" color="0x0000ff" width="4"/>
		<esri:GeometryService id="myGeometryService"/>
		<s:Label id="infoNameLabel" height="50" minWidth="100" fontWeight="bold" verticalCenter="0" horizontalCenter="0"
				 fontFamily="宋体" color="#2d4b8d" fontSize="14" verticalAlign="middle" textAlign="center" trackingLeft="2"/>
		<esri:DrawTool id="drawTool" drawEnd="drawTool_drawEndHandler(event)"/>
	</fx:Declarations>
	<s:states>
		<s:State name="normal"/>
		<s:State name="select"/>
		<s:State name="loading"/>
	</s:states>
	<s:Group width="100%" height="100%" includeIn="loading">
		<components:ViewerLoader verticalCenter="-100" horizontalCenter="0" backGroundAlpha="0" id="loader"/>
		<customskinbutton:ClickButton buttonType="normalTowState" label="取消" horizontalCenter="0" verticalCenter="-50"
									  id="cancleButton" click="cancleButton_clickHandler(event)" width="80" height="30"/>
	</s:Group>
	
	
	<s:VGroup width="100%" height="100%" gap="5" includeIn="normal">
		<s:HGroup width="100%" paddingLeft="10" paddingRight="10" gap="10" verticalAlign="middle">
			<s:VGroup gap="8" width="100%">
				<s:HGroup width="100%" gap="0" verticalAlign="middle">
					<s:Image source="assets/images/transfer/startInput.png"/>
					<s:Spacer width="5"/>
					<sho:CompletionInput id="startInput"  width="100%" skinClass="com.esri.viewer.skins.CommonTextInputSkin"
										 contentBackgroundColor="#ffffff" prompt="请输入出发地点"
										 keepLocalHistory="false"/>
					<s:Image id="startPickImage" toolTip="在地图上拾取出发地点" source="assets/images/transfer/pick_start.png"
							 buttonMode="true" click="startPickImage_clickHandler(event)"/>
				</s:HGroup>
				<s:HGroup width="100%" gap="0" verticalAlign="middle">
					<s:Image source="@Embed('assets/images/transfer/endInput.png')"/>
					<s:Spacer width="5"/>
					<sho:CompletionInput id="endInput"  width="100%"  skinClass="com.esri.viewer.skins.CommonTextInputSkin"
										 contentBackgroundColor="#ffffff" prompt="请输入目的地"
										 selectionChange="endInput_selectionChangeHandler(event)"
										 keepLocalHistory="false"/>
					<s:Image id="endPickImage" toolTip="在地图上拾取目的地" source="assets/images/transfer/pick_end.png"
							 buttonMode="true" click="endPickImage_clickHandler(event)"/>
				</s:HGroup>
			</s:VGroup>
			<mx:Image buttonMode="true" click="onClickAlterInputPoint(event);"
					  source="{ICON_URL + 'alterInput.png'}"/>				
		</s:HGroup>
		<s:Group width="100%" >
			<customskinbutton:ClickButton buttonType="circleRadius" label="搜 索" icon="assets/images/icon/search.png"
										  click="search_clickHandler(event);" horizontalCenter="0"/>	
			<!--<customskinbutton:ClickButton buttonType="normalThreeState" label="清空" icon="assets/images/transfer.png"
										  click="cleanButton_clickHandler(event)" id="cleanButton" right="50"/>	-->
			<s:Label id="cleanLabel" click="cleanButton_clickHandler(event)" buttonMode="true" right="50" 
					 text="清空" textDecoration="underline" rollOver="{cleanLabel.setStyle('fontWeight','bold')}"
					 baselineShift="2"
					 rollOut="{cleanLabel.setStyle('fontWeight','normal')}" fontSize="13" fontFamily="宋体" verticalCenter="0"/>
			<s:Image source="assets/images/transfer/clean.png"  click="cleanButton_clickHandler(event)" buttonMode="true"
					 width="15" height="15" right="80" verticalCenter="0"/>
		</s:Group>
		<componet:DottedLine width="100%"/>
		<s:TabBar id="transferOptionBar" width="100%" cornerRadius="0" height="24" fontWeight="bold"
				  requireSelection="true" selectedIndex="0" skinClass="widgets.BusTransfer.Transfer.TabBarSkin"
				  change="transferOptionBar_changeHandler(event);">
			<s:layout>
				<s:ButtonBarHorizontalLayout gap="10" />
			</s:layout>
			<s:dataProvider>
				<s:ArrayList source="['较快捷','少换乘', '少步行']" />
			</s:dataProvider>
		</s:TabBar>
		<s:List id="transfersList" width="100%" height="100%" allowMultipleSelection="false" 
			    borderVisible="false" contentBackgroundAlpha="0"
				itemRenderer="widgets.BusTransfer.Transfer.TransferItemRenderer"
				dataProvider="{_transferItems}" initialize="transfersList_initializeHandler(event)"
			 change="transfersList_changeHandler(event)">
			<s:layout>
				<s:VerticalLayout gap="5"/>
			</s:layout>
		</s:List>
	</s:VGroup>
	<validPanel:ValidPanel id="validPanel" width="100%" height="100%"
						   initialize="validPanel_initializeHandler(event)"
						   zoomlevel="{_zoomlevel}"
						   cancelSelect="validPanel_cancelSelectHandler(event)"
						   queryDetail="validPanel_queryDetailHandler(event)" pageSize="10" 
						   selectPOI="validPanel_selectPOIHandler(event)" includeIn="select">
	</validPanel:ValidPanel>
</s:Group>
