<?xml version="1.0" encoding="utf-8"?>
<!--
///////////////////////////////////////////////////////////////////////////
// Copyright (c) 2010-2011 Esri. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
///////////////////////////////////////////////////////////////////////////
-->
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
                xmlns:s="library://ns.adobe.com/flex/spark"
                xmlns:mx="library://ns.adobe.com/flex/mx"
                xmlns:HeaderController="widgets.HeaderController.*"
                width="100%"
                autoDrawBackground="true"
                buttonMode="true"
                click="itemrenderer_clickHandler(event)"
                dataChange="itemrenderer_dataChangeHandler(event)"
                minHeight="30"
                useHandCursor="true">

    <fx:Script>
        <![CDATA[
            import flashx.textLayout.formats.TextAlign;

            import mx.events.EffectEvent;
            import mx.events.FlexEvent;

            private const WIDGET_ITEM_CLICK:String = "widgetListItemClick";

            [Bindable]
            private var widgetItem:WidgetItem;

            private function itemrenderer_dataChangeHandler(event:FlexEvent):void
            {
                widgetItem = data as WidgetItem;
                icon.source = widgetItem.icon;
//                underline.widgetOpen = widgetItem.open;

                // set style on the label
//                widgetLabel.setStyle("textAlign", TextAlign.CENTER);
                widgetLabel.text = widgetItem.label;
            }

            private function itemrenderer_clickHandler(event:MouseEvent):void
            {
                dispatchEvent(new Event(WIDGET_ITEM_CLICK, true)); // bubbles
            }
        ]]>
    </fx:Script>

    <s:states>
        <s:State name="normal"/>
        <s:State name="hovered"/>
    </s:states>

    <!-- border/background rectangle -->
    <s:Rect left="0" right="0" top="0" bottom="0">
        <s:fill>
            <s:SolidColor alpha="0"
                          alpha.hovered="0.65"
                          color.hovered="#e1f0fe"/>
        </s:fill>
    </s:Rect>

    <s:VGroup width="100%" height="100%">
        <s:HGroup width="100%" height="30"
                  buttonMode="true"
                  paddingLeft="10"
                  useHandCursor="true"
                  verticalAlign="middle">
            <s:VGroup width="25" height="30"
                      horizontalAlign="center">
                <mx:Image id="icon"
                          width="100%" height="100%"/>
                <!--<HeaderController:WidgetUnderline id="underline"/>-->
            </s:VGroup>
			<s:Label color="#072d5d" fontWeight="bold" text=">"
					 fontFamily="微软雅黑"
					 fontSize="10"/>
            <s:Label id="widgetLabel"
                     width="100%"
                     color="#072d5d"
					 fontFamily="微软雅黑"
					 fontSize="12"
                     maxDisplayedLines="3"
                     showTruncationTip="true"/>
        </s:HGroup>
        <!--<s:Line width="100%">
            <s:stroke>
                <s:SolidColorStroke alpha="0.3"
                                    caps="square"
                                    color="#C4CCCC"
                                    weight="2"/>
            </s:stroke>
        </s:Line>-->
    </s:VGroup>
</s:ItemRenderer>

