<?xml version="1.0" encoding="utf-8"?>
<!--/**
* 兴趣点查询展示结果
* @ver 1.0
* @created 05-02-2012 09:00:46
*/
-->
<viewer:BaseWidget xmlns:fx="http://ns.adobe.com/mxml/2009"
				   xmlns:esri="http://www.esri.com/2008/ags"
				   xmlns:s="library://ns.adobe.com/flex/spark"
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   xmlns:viewer="com.esri.viewer.*" 
				   width="100%" height="100%"
				   widgetConfigLoaded="init()"
				   initialize="widgetInitializeHandler(event)"
				   xmlns:poiSearch="widgets.POISearch.*">
<fx:Script>
	<![CDATA[
		import com.esri.ags.Graphic;
		import com.esri.ags.layers.GraphicsLayer;
		import com.esri.ags.symbols.Symbol;
		import com.esri.viewer.AppEvent;
		import com.esri.viewer.IInfowindowTemplate;
		
		import mx.collections.ArrayCollection;
		import mx.events.FlexEvent;
		
		private var _postEvent:AppEvent;
		// constants
		private const ICON_URL:String = "assets/images/index/";
		private const TAG_ICON:Array = ["a.png", "b.png", "c.png", "d.png", "e.png", "f.png", "g.png", "h.png", "i.png", "j.png"];
		private var infoUrl:String;
		private var infoConfig:String;
		
		private var graphicsLayer:GraphicsLayer;
		private var queryFields:XMLList;
		private var _zoomLevel:Number = 13;
		[Bindable]
		private var lineLabel:String;
		[Bindable]
		private var pointLabel:String;
		[Bindable]
		private var polygonLabel:String;
		[Bindable]
		private var rectangleLabel:String;
		[Bindable]
		private var searchResultAC:ArrayCollection;
		private var resultMarkerSymbol:Symbol;
		//结果集中数据的状态
		private var resultStatus:String = "normal";
		//主键字段名
		private var _oidFieldName:String="";
		private var _searchWorker:SearchWorker = new SearchWorker();
		private var highlightGraphic:Graphic;
		private var _symbolsPerPage:Array = [];
		private var infoTemplate:IInfowindowTemplate;
		
		private function widgetInitializeHandler(event:FlexEvent):void
		{
			AppEvent.addListener(AppEvent.POST_PROCESS,onPostprocess);
		}
		
		private function init():void
		{
			if (configXML)
			{
				_oidFieldName = String(configXML.poi.oidfield);
				
				// infoUrl
				infoUrl = configXML.info;
				infoConfig = configXML.infoConfig;
				
				graphicsLayer = new GraphicsLayer();
				graphicsLayer.name = "POISearchResults";
				map.addLayer(graphicsLayer);
				
				//加载infowindow
				var data:Object =
					{
						id: String(this.widgetId),
						url: infoUrl,
						config: infoConfig
					};
				AppEvent.dispatch(AppEvent.DATA_CREATE_INFOWIDGET, data, infoReady);
				
				if (Number(configXML.zoomlevel) > 0)
				{
					_zoomLevel = Number(configXML.zoomlevel);
				}
				
				_searchWorker.oidFieldName = _oidFieldName;
				_searchWorker.graphicsLayer = graphicsLayer;
				_searchWorker.expression = String(configXML.poicatalogs.expression);
			}
			map.infoWindow.addEventListener(Event.CLOSE, closeMessage);
		}
		
		private function closeMessage(event:Event):void
		{
			if(highlightGraphic)
			{
				highlightGraphic.symbol = resultMarkerSymbol;
			}
		}
		
		private function infoReady(event:AppEvent):void
		{
			var id:Number = Number(event.data.id);
			if (id == this.widgetId)
			{
				infoTemplate = event.data.infoWidget;
				infoTemplate.infoConfig = configXML;
				//王红亮，2011-04-08
				var bWidget:BaseWidget = infoTemplate as BaseWidget;
				if(bWidget)
				{
					bWidget.configData = this.configData;
				}
			}
		}
		
		/**
		 * 开始查询。温杨彪；2012-9-18 重构
		 * @param filterGeometry 过滤的空间信息
		 **/
		private function startQuery():void
		{
			var filter:QueryFilter = new QueryFilter();
			if(_currentPOICatalog != null)
			{
				filter.poiCatalogCode = String(_currentPOICatalog.@code);
				filter.url = String(configXML.poicatalogs.url);
			}
			else
			{
				filter.url = String(configXML.general.url);
			}
			if(_currentPOISubCatalog != null)
			{
				filter.subPOICatalogCode = String(_currentPOISubCatalog.@code)
			}
			
			noResultGrp.visible = false;
			noResultGrp.includeInLayout = false;
			graphicsLayer.clear();
			this.searchResultDG.dataProvider = null;
			startBusyStatus();
			
			filter.outFields = [_oidFieldName];
			_searchWorker.queryByFilter(filter,new AsyncResponder(queryByFilter_resultHandler,queryByFilter_faultHandler));
		}
		
		private function queryByFilter_resultHandler(result:FeatureSet,token:Object = null):void
		{
			createSymbols()
			stopBusyStatus();
			if(result.attributes.length<1)
			{
				noResultGrp.visible = true;
				noResultGrp.includeInLayout = true;
				resultTip.visible = false;
				resultTip.includeInLayout = false;
			}
			else
			{
				noResultGrp.visible = false;
				noResultGrp.includeInLayout = false;
				resultTip.visible = true;
				resultTip.includeInLayout = true;
				countLabel.text = ""+result.features.length;
			}
			
			try
			{
				searchResultAC = createSearchResults(result);
				var totalLength:uint = searchResultAC.length;
				const totalPageCount:uint = (totalLength % RECORDS_PER_PAGE == 0) ? (totalLength / RECORDS_PER_PAGE) : (totalLength / RECORDS_PER_PAGE + 1);
				
				pagesSelector.set_TotalCount(totalPageCount);
				switchToPage(1);
			}
			catch (error:Error)
			{
				
			}
		}
		private function queryByFilter_faultHandler(fault:Fault,token:Object = null):void
		{
			Alert.show("查询失败\n"+fault.faultString);
			return;
		}
		
		private function onSearchResultProcess(event:AppEvent):void
		{
			switch(event.data.process)
			{
				case 1:
					resultStatus = "start";
					break
				case 2:
					resultStatus = "end";
					break;
			}
		}
		
		
		//create record data
		private function createSearchResults(featureSet:FeatureSet):ArrayCollection
		{
			var result:ArrayCollection = new ArrayCollection();
			for each (var graphic:Graphic in featureSet.features)
			{
				graphic.addEventListener(MouseEvent.CLICK, graphic_clickHandler);
				var searchResult:SearchResult = new SearchResult();
				searchResult.graphic = graphic;
				var point:MapPoint = getGeomCenter(graphic);
				if (point && !isNaN(point.x) && !isNaN(point.y)) // make sure it is a valid point
				{
					result.addItem(searchResult);
					graphicsLayer.add(graphic);
				}
			}
			return result;
		}
		
		private function graphic_clickHandler(event:MouseEvent):void
		{
			var gra:Graphic = event.currentTarget as Graphic;
			for each(var searchResult:SearchResult in searchResultDG.dataProvider)
			{
				if(searchResult.graphic == gra)
				{
					showHighlight([searchResult]);
					break;
				}
			}
			
		}
		
		
		/**
		 * 获取几何对象的中心点
		 */ 
		private function getGeomCenter(graphic:Graphic):MapPoint
		{
			var pt:MapPoint;
			switch (graphic.geometry.type)
			{
				case Geometry.MAPPOINT:
				{
					pt = graphic.geometry as MapPoint;
					break;
				}
				case Geometry.POLYLINE:
				{
					const pl:Polyline = graphic.geometry as Polyline;
					const pathCount:Number = pl.paths.length;
					const pathIndex:int = int((pathCount / 2) - 1);
					const midPath:Array = pl.paths[pathIndex];
					const ptCount:Number = midPath.length;
					const ptIndex:int = int((ptCount / 2) - 1);
					pt = pl.getPoint(pathIndex, ptIndex);
					break;
				}
				case Geometry.POLYGON:
				{
					const poly:Polygon = graphic.geometry as Polygon;
					pt = poly.extent.center;
					break;
				}
			}
			return pt;
		}
		
		private const PAGE_COUNT:uint = 6;
		private const RECORDS_PER_PAGE:uint = 10; //每页显示的记录数
		
		/**
		 * 转换到某一页
		 * @param pageNum 目标页面，base：0
		 * @return 无
		 * 2011-07-08
		 */
		private function switchToPage(pageNum:uint):void
		{
			var totalLength:uint = searchResultAC.length;
			const totalPageCount:uint = totalLength % RECORDS_PER_PAGE == 0 ? totalLength / RECORDS_PER_PAGE : (totalLength / RECORDS_PER_PAGE + 1);
			if(pageNum > totalPageCount || pageNum < 1)
				return;
			map.infoWindow.hide();
			var startIndex:uint = (pageNum - 1) * RECORDS_PER_PAGE;
			var endIndex:uint = startIndex + RECORDS_PER_PAGE;
			endIndex = endIndex <= searchResultAC.length ? endIndex : searchResultAC.length;
			var records:ArrayCollection = new ArrayCollection(searchResultAC.source.slice(startIndex, endIndex));
			//恢复之前作为当前页的符号显示
			if(searchResultDG.dataProvider)
			{
				for each(var item:SearchResult in searchResultDG.dataProvider)
				{
					item.graphic.symbol = null;
				}
			}
			//以图片符号显示当前页
			var index:int = 0;
			for each(item in records)
			{
				item.graphic.symbol = _symbolsPerPage[index];
				item.index = index;
				index += 1;
			}
			//查询当前页内的所有graphic的属性信息
			queryProperties(records);
		}
		
		/**
		 * 查询数组内所有图形的属性信息
		 */
		private function queryProperties(records:ArrayCollection):void
		{
			var ids:Array = [];
			for each(var result:SearchResult in records)
			{
				ids.push(result.graphic.attributes[_oidFieldName]);
			}
			var filter:QueryFilter = new QueryFilter();
			filter.oids = ids;
			//输出字段
			var queryFieldsXML:XML;
			var foreignKeyField:String="";
			if(_currentPOICatalog)
			{
				queryFieldsXML = configXML.poicatalogs.fields[0];
				filter.url = String(configXML.poicatalogs.url);
				foreignKeyField= configXML.poicatalogs.foreignkeyfield;
			}
			else
			{
				queryFieldsXML = configXML.general.fields[0];
				filter.url = String(configXML.general.url);
				foreignKeyField = configXML.general.foreignkeyfield;
			}
			
			if(!queryFieldsXML)
			{
				return;
			}
			filter.outFields = [];
			for each (var fieldXML:XML in queryFieldsXML.field)
			{
				if (fieldXML.@name[0])
				{
					filter.outFields.push(String(fieldXML.@name[0]));
				}
			}	
			
			//如果外键没有设置，则不查询外键  温杨彪；2011-11-29
			if(foreignKeyField!="")
			{
				filter.outFields.push(foreignKeyField);
			}
			_searchWorker.queryDetailByIds(filter,new AsyncResponder(queryDetailByIds_resultHandler, queryByFilter_faultHandler, records));
		}
		
		private function queryDetailByIds_resultHandler(featureSet:FeatureSet, records:ArrayCollection = null):void
		{
			var queryFieldsXML:XMLList;
			if(_currentPOICatalog)
			{
				queryFields = configXML.poicatalogs.fields;
			}
			else
			{
				queryFields = configXML.general.fields;
			}
			var fields:XMLList = queryFields[0] ? queryFields[0].field : null;
			
			var queryTitleField:String;
			var queryLinkField:String;
			var queryForeignKeyField:String;
			if(_currentPOICatalog)
			{
				queryTitleField	= configXML.poicatalogs.titlefield[0];
				queryLinkField = configXML.poicatalogs.linkfield[0];
				queryForeignKeyField = String(configXML.poicatalogs.foreignkeyfield);
			}
			else
			{
				queryTitleField	= configXML.general.titlefield[0];
				queryLinkField = configXML.general.linkfield[0];
				queryForeignKeyField = String(configXML.general.foreignkeyfield);
			}
			var graphic:Graphic;
			var value:String = "";
			var title:String = "";
			var content:String = "";
			var link:String = "";
			var foreignKey:String = "";
			var searchResult:SearchResult;
			for (var index:uint = 0; index < featureSet.features.length; ++index)
			{
				title = "";
				content = "";
				link = "";
				foreignKey = "";
				graphic = featureSet.features[index];
				for each(var fieldXML:XML in fields)
				{
					value = "";
					var fieldName:String;
					fieldName = fieldXML.@name || "";
					fieldName = fieldName.toUpperCase();
					for(var attribute:String in graphic.attributes)
					{
						if(attribute.toUpperCase() != fieldName)
							continue;
						value = graphic.attributes[attribute] ? String(graphic.attributes[attribute]) : "";
						if (fieldName.toUpperCase() == queryTitleField.toUpperCase())
						{
							title = value;
						}
						else if (queryLinkField != null && queryLinkField.toString() != "" && fieldName.toUpperCase() == queryLinkField.toUpperCase())
						{
							link = value;
						}
						else if (fieldName.toUpperCase() == queryForeignKeyField.toUpperCase())
						{
							foreignKey = value;
						}
						else
						{
							content += (fieldXML.@alias || fieldName) + "：" + value + "\n";
						}
						
					}
				}
				
				if(content.length > 0)
				{
					content = content.substring(0, content.length - 1);
				}
				searchResult = records[index];
				//获取外键的值，2011-08-18
				//温杨彪修改，2011-11-29，如果外键为空，则不加外键
				if(queryForeignKeyField.toUpperCase() != _oidFieldName && queryForeignKeyField!="")
				{
					searchResult.graphic.attributes[queryForeignKeyField] = foreignKey;
				}
				searchResult.title = title;
				searchResult.content = content;
				searchResult.link = link ? link : null;
			}
			searchResultDG.dataProvider = records;
			map.extent = GraphicUtil.getGraphicsExtent(featureSet.features);
		}
		
		/**显示graphic的属性
		 * @param graphic 含有属性的graphic
		 * @param fieldXML 含有字段信息的配置xml
		 * @param titleField 标题字段
		 * @param linkField 详细信息字段
		 * @param foreignKeyField 外键字段
		 */
		private function displayField(graphic:Graphic, 
									  fieldXML:XML,
									  titleField:String,
									  linkField:String = "",
									  foreignKeyField:String=""):void
		{
			
		}
		
		/**
		 * 弹出框
		 */ 
		override public function showInfoWindow(infoData:Object):void
		{
			if (infoData)
			{
				//map.infoWindow.width = 320;
				
				//王红亮，2011-04-08
				var infoWindowData:Object = {title:infoData.title, 
					content:infoData.content,
					link:infoData.link,
					multimedia:infoData.graphic.attributes.multimedia,
					graphic:infoData.graphic,
					fromWidget:this};
				
				//温杨彪；2011-7-29   让infoWindow第一次能显示东西
				infoTemplate.data = infoWindowData;
				map.infoWindow.content = infoTemplate as UIComponent;
				map.infoWindow.label = infoData.title || "";
				map.infoWindow.show(getGeomCenter(infoData.graphic));
			}
			else
			{
				map.infoWindow.hide();
			}
		}
		
		
		private function clear():void
		{
			graphicsLayer.clear();
			if (searchResultAC && searchResultAC.length)
			{
				searchResultAC.removeAll();
			}
			this.showInfoWindow(null);
		}
		
		private var hitimer:uint;
		
		private function mouseOverSearchResult(event:Event):void
		{
			clearTimeout(hitimer);
			hitimer = setTimeout(showHighlight, 800, [ ItemRenderer(event.target).data as SearchResult ]);
		}
		
		private function mouseOutSearchResult(event:Event):void
		{
			clearTimeout(hitimer);
		}
		
		/**
		 * 点击搜索结果后的移动屏幕，此时不需要重新搜索。主要针对“可视区域”搜索时使用
		 **/
		private var _isClickSearchResult:Boolean = false;
		private function clickSearchResult(event:Event):void
		{
			var searchResult:SearchResult = ItemRenderer(event.target).data as SearchResult;
			if (map.level < _zoomLevel)
			{
				map.level = _zoomLevel;
			}
			map.centerAt(getGeomCenter(searchResult.graphic));
		}
		
		private function showHighlight(params:Array):void
		{
			var searchResult:SearchResult = params[0];
			
			var graphic:Graphic = searchResult.graphic;
			if(!graphic)
				return;
			this.showInfoWindow(searchResult);
			return;
			
			//查询该图形关联的多媒体信息
			var queryTask:QueryTask = new QueryTask();
			var relatedtableXML:XML;
			queryTask.url = relatedtableXML.url;
			queryTask.useAMF = true;
			var query:Query = new Query();
			query.returnGeometry = false;
			var express:String = relatedtableXML.expression;
			var keyValue:String;
			var foreignKeyField:String;
			for(var attribute:String in graphic.attributes)
			{
				if(foreignKeyField.toUpperCase() == attribute.toUpperCase())
				{
					keyValue = graphic.attributes[attribute]||"0";
					break;
				}
			}
			if(keyValue == "")
			{
				return;
			}
			query.where = express.replace("[value]", keyValue);
			var multimediaField:String = relatedtableXML.multimediafield;
			query.outFields = [multimediaField];
			queryTask.execute(query, new AsyncResponder(query_resultHandler, onFault, graphic));
			
			function query_resultHandler(featureSet:FeatureSet, token:Graphic = null):void
			{
				var arr:Array = [];
				for each(var result:Graphic in featureSet.features)
				{
					arr.push(result.attributes[multimediaField]);
					
				}
				token.attributes.multimedia = arr;
				
				showInfoWindow(params[0]);
			}
			
			function onFault(fault:Object, token:Object = null):void
			{
				token.attributes.multimedia = [];
				showInfoWindow(params[0]);
			}
		}
		
		private function widgetClosedHandler(event:Event):void
		{
			map.removeLayer(graphicsLayer);
			this.showInfoWindow(null);
		}
		
		private function widgetOpenedHandler(event:Event):void
		{
			if (graphicsLayer)
			{
				map.addLayer(graphicsLayer);
			}
		}
		
		/**
		 * 启动正在忙碌的状态
		 */
		private function startBusyStatus():void
		{
			loadingStatusGroup.visible = true;
			loadingStatusGroup.includeInLayout = true;
		}
		/**
		 * 关闭正在忙碌的状态
		 */
		private function stopBusyStatus():void
		{
			loadingStatusGroup.visible = false;
			loadingStatusGroup.includeInLayout = false;
		}
		
		private function closeMessage(event:Event):void
		{
			if(highlightGraphic)
			{
				highlightGraphic.symbol = resultMarkerSymbol;
			}
		}
		
		protected function pagesselector1_PageChangedHandler(event:com.esri.viewer.components.pageSelector.PageChangeEvent):void
		{
			switchToPage(event.currentPage);
		}
		
		
		/**
		 * 创建图层的显示符号，包括普通符号和高亮符号
		 **/
		private function createSymbols():void
		{
			//符号显示
			var catalogXML:XML;
			catalogXML = _currentPOICatalog;
			const SIZE:Number = catalogXML.simplemarkersymbol.@size || 10;
			const COLOR:Number = catalogXML.simplemarkersymbol.@color || 0x000000;
			const ALPHA:Number = catalogXML.simplemarkersymbol.@alpha || 1.0;
			this.resultMarkerSymbol = new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_CIRCLE, SIZE, COLOR, ALPHA);
			this.graphicsLayer.symbol = resultMarkerSymbol;
			
			_symbolsPerPage = [];
			for(var index:int = 0; index < RECORDS_PER_PAGE; ++index)
			{
				var pictureSymbol:PictureMarkerSymbol = new PictureMarkerSymbol(this.ICON_URL+TAG_ICON[index]);
				_symbolsPerPage.push(pictureSymbol);
			}
		}
		
		/**
		 * 获取查询关键字
		 */
		private function onPostprocess(event:AppEvent):void
		{
			if(this.widgetId != event.data.postprocessor)
			{
				return;
			}
			if(!configXML)
			{
				this._postEvent = event;
				return;
			}
			else
			{
				this._postEvent = null;
				var queryData:Object = event.data;
				var queryName:String = queryData.queryName;
				//开始查询
			}
		}
	]]>
</fx:Script>
	<viewer:SplitWidgetTemplate id="wTemplate" fontFamily="宋体"
								width="100%" height="100%"
								backgroundColor="#FFFFFF"
								closed="widgetClosedHandler(event)"
								open="widgetOpenedHandler(event)" >
		<viewer:layout>
			<s:VerticalLayout horizontalAlign="center" verticalAlign="top" paddingLeft="7" paddingRight="7"/>
		</viewer:layout>
		<!-- result-->
		<s:VGroup width="100%" horizontalAlign="left" verticalAlign="middle" paddingTop="0">
			<s:BorderContainer id="resultTip" width="100%" height="25" borderVisible="false"
							   includeInLayout="false" visible="false"
							   backgroundColor="0xf3f6fa">
				<s:layout>
					<s:HorizontalLayout horizontalAlign="right" verticalAlign="middle"/>
				</s:layout>
				<s:Label text="共有" fontFamily="宋体"  verticalAlign="middle" fontSize="12" color="0x747678"/>
				<s:Label id="countLabel" fontFamily="宋体"  verticalAlign="middle" fontSize="12" color="0xff8105"/>
				<s:Label text="条结果" fontFamily="宋体"  verticalAlign="middle" fontSize="12" color="0x747678"/>
			</s:BorderContainer>
			<s:BorderContainer width="100%" height="25" borderVisible="false" 
							   includeInLayout="false" visible="false"
							   backgroundColor="#E5EEFF" id="noResultGrp">
				<s:layout>
					<s:HorizontalLayout horizontalAlign="right" gap="18" verticalAlign="middle"  paddingRight="5"/>
				</s:layout>
				<s:Image source="assets/images/attention.png" />
				<s:Label text="没有搜到您要的信息" textAlign="left" fontFamily="宋体" color="#4a535f" fontSize="12" fontWeight="normal"/>
			</s:BorderContainer>
			<s:VGroup id="loadingStatusGroup" width="100%" horizontalAlign="center" gap="5" includeInLayout="false" visible="false"
					  horizontalCenter="0" verticalCenter="0">
				<s:SWFLoader source="assets/images/loading.swf"/>
				<s:Label text="正在搜索..." fontFamily="宋体" fontSize="12" color="#4061ad"/>
			</s:VGroup>
			<s:Scroller width="100%" maxHeight="380" verticalScrollPolicy="auto">
				<poiSearch:SearchResultDataGroup id="searchResultDG" width="100%"
											  fontFamily="宋体"
											  searchResultClick="clickSearchResult(event)"
											  searchResultMouseOut="mouseOutSearchResult(event)"
											  searchResultMouseOver="mouseOverSearchResult(event)">
					<poiSearch:layout>
						<s:VerticalLayout gap="10"
										  horizontalAlign="justify"
										  useVirtualLayout="true"/>
					</poiSearch:layout>
				</poiSearch:SearchResultDataGroup>
			</s:Scroller>
			<s:Group width="100%">
				<s:Rect top="0" left="0" bottom="0" right="0">
					<s:fill>
						<s:SolidColor color="0xffffff" alpha="0"/>
					</s:fill>
				</s:Rect>
				<poiSearch:PagesSelector PageChanged="pagesselector1_PageChangedHandler(event)" 
											pageCount="6" id="pagesSelector" horizontalCenter="0"/>
			</s:Group>
		</s:VGroup>
	</viewer:SplitWidgetTemplate>
</viewer:BaseWidget>