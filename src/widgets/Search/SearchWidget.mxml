<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
// Copyright (c) 2010 ESRI
//
// All rights reserved under the copyright laws of the United States.
// You may freely redistribute and use this software, with or
// without modification, provided you include the original copyright
// and use restrictions.  See use restrictions in the file:
// <install location>/License.txt
//
////////////////////////////////////////////////////////////////////////////////
-->
<viewer:BaseWidget xmlns:esri="http://www.esri.com/2008/ags"
				   xmlns:fx="http://ns.adobe.com/mxml/2009"
				   xmlns:s="library://ns.adobe.com/flex/spark"
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   xmlns:Search="widgets.Search.*"
				   xmlns:viewer="com.esri.viewer.*"
				   xmlns:components="com.esri.viewer.components.*"
				   xmlns:pageSelector="com.esri.viewer.components.pageSelector.*" 
				   width="100%" height="100%"
				   widgetConfigLoaded="init()" >
	<fx:Script>
		<![CDATA[
			import com.esri.ags.FeatureSet;
			import com.esri.ags.Graphic;
			import com.esri.ags.events.DrawEvent;
			import com.esri.ags.events.ExtentEvent;
			import com.esri.ags.geometry.Extent;
			import com.esri.ags.geometry.Geometry;
			import com.esri.ags.geometry.MapPoint;
			import com.esri.ags.geometry.Polygon;
			import com.esri.ags.geometry.Polyline;
			import com.esri.ags.layers.GraphicsLayer;
			import com.esri.ags.layers.supportClasses.Field;
			import com.esri.ags.symbols.*;
			import com.esri.ags.tasks.QueryTask;
			import com.esri.ags.tasks.supportClasses.Query;
			import com.esri.ags.tools.DrawTool;
			import com.esri.ags.utils.GraphicUtil;
			import com.esri.viewer.AppEvent;
			import com.esri.viewer.IInfowindowTemplate;
			import com.esri.viewer.ViewerContainer;
			import com.esri.viewer.components.pageSelector.PageChangeEvent;
			import com.esri.viewer.components.tools.*;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.containers.TitleWindow;
			import mx.controls.Alert;
			import mx.controls.LinkButton;
			import mx.core.UIComponent;
			import mx.events.EffectEvent;
			import mx.events.FlexEvent;
			import mx.formatters.DateFormatter;
			import mx.rpc.AsyncRequest;
			import mx.rpc.AsyncResponder;
			import mx.rpc.Fault;
			import mx.utils.StringUtil;
			
			import spark.components.supportClasses.ItemRenderer;
			import spark.events.IndexChangeEvent;

			private var infoUrl:String;
			private var infoConfig:String;
			private var infoTemplate:IInfowindowTemplate;
			private var graphicsLayer:GraphicsLayer;
			private var _zoomLevel:Number = 13;
			[Bindable]
			private var searchResultAC:ArrayCollection = new ArrayCollection();
			private var layerObject:LayerObject = new LayerObject();
			private const PAGE_COUNT:uint = 6;		//显示页码数
			private const RECORDS_PER_PAGE:uint = 10; //每页显示的记录数
			[Bindable]
			private var totalPageCount:uint		//查询总页数
			[Bindable]
			private var totalCount:uint		//查询总个数
			private var objectIdsArray:Array = [];	//查询结果ID数组
			private const ICON_URL:String = "assets/images/index/";
			private const TAG_ICON:Array = ["a.png", "b.png", "c.png", "d.png", "e.png", "f.png", "g.png", "h.png", "i.png", "j.png"];
			private var _symbolsPerPage:Array = [];
			
			//当前选中的POI大类
			private var _currentPOICatalog:XML = null;
			//当前选中的POI小类
			private var _currentPOISubCatalog:XML = null;
			private var _rootCatalogIndex:int;
			private var _lastLinkButton:LinkButton;
			private function init():void
			{
				if (configXML)
				{
					
					// infoUrl
					infoUrl = configXML.info;
					infoConfig = configXML.infoConfig;
					//加载infowindow
					var data:Object =
						{
							id: String(this.widgetId),
							url: infoUrl,
							config: infoConfig
						};
					AppEvent.dispatch(AppEvent.DATA_CREATE_INFOWIDGET, data, infoReady);
					
					if (Number(configXML.zoomlevel) > 0)
					{
						_zoomLevel = Number(configXML.zoomlevel);
					}
					
					//初始化分类面板
					initRootCatalog();
					
					//解析POI关键字查询图层
					layerObject.url = configXML.poicatalogs.url;
					layerObject.titlefield = configXML.poicatalogs.titlefield;
					layerObject.catalogmatch = configXML.poicatalogs.catalogmatch;
					layerObject.subcatalogmatch = configXML.poicatalogs.subcatalogmatch;
					layerObject.outFields = new Array();
					layerObject.outFieldAlias = new Array();
					var fields:XMLList = configXML.poicatalogs.displayfields.field;
					for each (var fieldTemp:XML in fields){
						layerObject.outFields.push(fieldTemp.@name);
						layerObject.outFieldAlias.push(fieldTemp.@alias);
					}
					
					graphicsLayer = new GraphicsLayer();
					graphicsLayer.name = "SearchResults";
					map.addLayer(graphicsLayer);
				}
				//序号图片
				for(var index:int = 0; index < 10; ++index)
				{
					var pictureSymbol:PictureMarkerSymbol = new PictureMarkerSymbol(ICON_URL+TAG_ICON[index],22,26,0,0);
					_symbolsPerPage.push(pictureSymbol);
				}
			}
			
			/**
			 * 初始化弹出框Widget
			 */ 
			private function infoReady(event:AppEvent):void
			{
				var id:Number = Number(event.data.id);
				if (id == this.widgetId)
				{
					infoTemplate = event.data.infoWidget;
				}
			}
			
			/**
			 * 一级分类信息
			 */
			private function initRootCatalog():void
			{
				if(!this.catalogGroup)
				{
					return;
				}
				_lastLinkButton = null;
				this.catalogGroup.removeAllElements();
				var poiXMLList:XMLList = configXML.poicatalogs.poicatalog;
				for(var i:uint = 0; i < poiXMLList.length(); ++i)
				{
					name = poiXMLList[i].@name;
					var linkButton:LinkButton = new LinkButton();
					linkButton.id = poiXMLList[i].@code;
					linkButton.label = name;
					linkButton.setStyle("color", 0x535353);
					linkButton.setStyle("rollOverColor", 0x2B9DBF);
					linkButton.setStyle("textRollOverColor", 0xFFFFFF);
					linkButton.setStyle("textDecoration", "none");
					linkButton.addEventListener(MouseEvent.CLICK, onClickRootCatalog);
					this.catalogGroup.addElement(linkButton);
				}
				_currentPOICatalog = null;
				_currentPOISubCatalog = null;
			}
			
			
			/**
			 * 点击根分类后，弹出下一级分类信息
			 * */
			private function onClickRootCatalog(event:MouseEvent):void
			{
				if(_lastLinkButton != null)
				{
					_lastLinkButton.setStyle("fontWeight","normal");
				}
				var linkButton:LinkButton = event.target as LinkButton;
				linkButton.setStyle("fontWeight","bold");
				_lastLinkButton = linkButton;
				var index:int = catalogGroup.getElementIndex(linkButton);
				_rootCatalogIndex = index;
				if(index < 0)
				{
					return;
				}
				
				initSubCatalog(index);
				catalogLabel.label = "> " + linkButton.label;
				
				//设置查询的参数
				_currentPOICatalog = configXML.poicatalogs.poicatalog[index];
				_currentPOISubCatalog = null;
				queryForIds(layerObject.catalogmatch,linkButton.id);
			}
			
			/**
			 * 初始化二级分类
			 */ 
			private function initSubCatalog(index:int):void
			{
				if(!this.catalogGroup)
				{
					return;
				}
				_lastLinkButton = null;
				var name:String;
				var subcatalogsXML:XML = configXML.poicatalogs.poicatalog[index].subcatalogs[0];
				if(!subcatalogsXML)
				{
					return;
				}
				this.catalogGroup.removeAllElements();
				for each(var xml:XML in subcatalogsXML.subcatalog)
				{
					name = xml.@name;
					var linkButton:LinkButton = new LinkButton();
					linkButton.id = xml.@code;
					linkButton.label = name;
					linkButton.setStyle("color", 0x535353);
					linkButton.setStyle("rollOverColor", 0x2B9DBF);
					linkButton.setStyle("textRollOverColor", 0xFFFFFF);
					linkButton.setStyle("textDecoration", "none");
					linkButton.addEventListener(MouseEvent.CLICK, clickSubCatalog);
					this.catalogGroup.addElement(linkButton);
				}
				_currentPOISubCatalog = null;
			}
			
			/**
			 * 点击二级分类链接
			 */ 
			private function clickSubCatalog(event:MouseEvent):void
			{
				if(_lastLinkButton != null)
				{
					_lastLinkButton.setStyle("fontWeight","normal");
				}
				var name:String = String(_currentPOICatalog.@name);
				var linkButton:LinkButton = event.target as LinkButton;
				linkButton.setStyle("fontWeight","bold");
				_lastLinkButton = linkButton;
				subCatalogLabel.label = "> " + linkButton.label;
				var index:int = catalogGroup.getElementIndex(linkButton);
				_currentPOISubCatalog = _currentPOICatalog.subcatalogs[0].subcatalog[index];
				queryForIds(layerObject.subcatalogmatch,linkButton.id);
			}
			
			/**
			 * 返回一级分类显示面板
			 */
			private function clickReturnToRootCatalog(event:MouseEvent):void
			{
				this.initRootCatalog();
				catalogLabel.label = "";
				subCatalogLabel.label = "";
				_currentPOICatalog = null;
				_currentPOISubCatalog = null;
			}
			
			/**
			 * 返回二级分类链接
			 */ 
			private function clickReturnToSubCatalog(event:MouseEvent):void
			{
				initSubCatalog(_rootCatalogIndex);
				subCatalogLabel.label = "";
				
				//设置查询的参数
				var poiXML:XML = configXML.poicatalogs.poicatalog[_rootCatalogIndex];
				_currentPOICatalog = poiXML;
				_currentPOISubCatalog = null;
			}
			
			/**
			 * 查询满足条件的所有ID
			 */ 
			private function queryForIds(expression:String,value:String):void
			{
				startBusyStatus();
				resultTip.includeInLayout = false;
				resultTip.visible = false;
				var queryTask:QueryTask = new QueryTask();
				queryTask.disableClientCaching = false;
				queryTask.useAMF = true;
				queryTask.url = layerObject.url;
				var query:Query=new Query();
				query.returnGeometry = false;
				query.where = expression.replace("[VALUE]",value);
				queryTask.executeForIds(query, new AsyncResponder(onExecuteForIdsComplete, onFault));
			}
			
			/**
			 * ID结果处理函数
			 */ 
			private function onExecuteForIdsComplete(objectIds:Array,token:Object=null):void{
				objectIdsArray = objectIds;
				this.totalCount = objectIds.length;
				var totalLength:uint = uint(objectIds.length);
				totalPageCount = totalLength % RECORDS_PER_PAGE == 0 ? totalLength / RECORDS_PER_PAGE : (totalLength / RECORDS_PER_PAGE + 1);
				pagesSelector.set_TotalCount(totalPageCount);	//总页数
				if(objectIds.length>0){
					doQueryByPageNun(1);
				}else{
					searchResultAC.removeAll();
				}
				resultCountLabel.text = ""+objectIdsArray.length;
				resultTip.includeInLayout = true;
				resultTip.visible = true;
				stopBusyStatus();
			}
			
			/**
			 * 分页查询要素
			 */ 
			private function doQueryByPageNun(startPageId:int):void{
				searchResultAC.removeAll();
				graphicsLayer.clear();
				map.infoWindow.hide();
				var queryTask:QueryTask = new QueryTask();
				queryTask.disableClientCaching = false;
				var query:Query=new Query();
				var startIndexObjectIDArrayInPage:int = (startPageId - 1) * RECORDS_PER_PAGE;
				var endIndexObjectIDArrayInPage:int = startIndexObjectIDArrayInPage + RECORDS_PER_PAGE;
				if (endIndexObjectIDArrayInPage > this.totalCount){
					endIndexObjectIDArrayInPage = this.totalCount;
				}
				query.objectIds = objectIdsArray.slice(startIndexObjectIDArrayInPage, endIndexObjectIDArrayInPage);
				query.returnGeometry = true;
				query.orderByFields = [layerObject.titlefield];
				query.outFields=layerObject.outFields;
				queryTask.url=layerObject.url;
				queryTask.execute(query, new AsyncResponder(proQueryResultByPageNum, onFault));
			}
			
			/**
			 * 分页查询返回结果处理
			 */ 
			private function proQueryResultByPageNum(featureSet:FeatureSet,token:Object=null):void{
				var results:ArrayCollection=new ArrayCollection();
				var features:Array=featureSet.features;
				for (var i:int=0; i < features.length; i++){
					var feature:Graphic=features[i];
					var result:SearchResult=new SearchResult();	//自定义查询结果对象
					var content:String = new String();	//显示内容
					for (var j:int=0; j < layerObject.outFields.length; j++){
						var att:String=layerObject.outFields[j];//字段
						content += layerObject.outFieldAlias[j] + "：" + feature.attributes[att] + "\n";
					}
					result.title = feature.attributes[layerObject.titlefield];	//弹出框标题
					result.content = content;
					result.index = i;
					result.point = getGeomCenter(feature.geometry);		//要素中心点
					results.addItem(result);
					
					//地图上的显示要素
					var resultGraphic:Graphic = new Graphic(result.point,this._symbolsPerPage[i]);
					resultGraphic.attributes=result;
					resultGraphic.addEventListener(MouseEvent.CLICK, graphicMouseClickHandler);
					graphicsLayer.add(resultGraphic);
				}
				searchResultAC = results;
				map.extent = GraphicUtil.getGraphicsExtent(featureSet.features);
			}
			
			private function onFault(info:Object, token:Object=null):void{
				stopBusyStatus();
				Alert.show("发现异常,请联系管理员.内容："+info.toString());
			}
			
			/***
			 * 单击图标并弹出信息框
			 **/ 
			private function graphicMouseClickHandler(event:MouseEvent):void
			{
				var gra:Graphic=event.currentTarget as Graphic;
				var result:SearchResult=gra.attributes as SearchResult;
				var infoWindowData:Object = {title:result.title, 
					content:result.content,
					point:result.point};
				this.showInfoWindow(infoWindowData);
			}
			
			/**
			 * 单击结果列表中的某个结果
			 */ 
			private function clickSearchResult(event:Event):void{
				var result:SearchResult=ItemRenderer(event.target).data as SearchResult;
				var infoWindowData:Object = {title:result.title, 
					content:result.content,
					point:result.point};
				this.showInfoWindow(infoWindowData);
			}
			
			
			/**
			 * 弹出框
			 */ 
			override public function showInfoWindow(infoData:Object):void
			{
				if (infoData)
				{
					var infoWindowData:Object = {title:infoData.title, 
						content:infoData.content,
						graphic:infoData.graphic};
					infoTemplate.data = infoWindowData;
					map.infoWindow.content = infoTemplate as UIComponent;
					map.infoWindow.label = infoData.title || "";
					map.infoWindow.show(infoData.point);
					map.centerAt(infoData.point);
				}
				else
				{
					map.infoWindow.hide();
				}
			}
			
			/**
			 * 获取几何中心点
			 */ 
			private function getGeomCenter(geo:Geometry):MapPoint{
				var pt:MapPoint;
				switch (geo.type){
					case Geometry.MAPPOINT:{
						pt = geo as MapPoint;
						break;
					}case Geometry.POLYLINE:{
						var pl:Polyline = geo as Polyline;
						var pathCount:Number = pl.paths.length;	
						var pathIndex:int = int((pathCount / 2) - 1);
						var midPath:Array = pl.paths[pathIndex];
						var ptCount:Number = midPath.length;
						//如果一条折先只有两个折点
						if(ptCount==2){
							var startPoint:MapPoint = pl.getPoint(pathIndex, 0);
							var endPoint:MapPoint = pl.getPoint(pathIndex, 1);
							var x:Number = startPoint.x + (endPoint.x -startPoint.x)/2 ;
							var y:Number = startPoint.y + (endPoint.y -startPoint.y)/2 ;
							pt = new MapPoint(x,y,map.spatialReference);
						}else{
							var ptIndex:int = int((ptCount / 2) - 1);
							pt = pl.getPoint(pathIndex, ptIndex);
						}
						break;
					}case Geometry.POLYGON:{
						var poly:Polygon = geo as Polygon;
						pt = poly.extent.center;
						break;
					}
				}
				return pt;
			}
			
			private function pageChangedHandler(event:PageChangeEvent):void{
				switchToPage(event.currentPage);
			}
			
			/**
			 * 转换到某一页
			 * @param pageNum 目标页面
			 * @return 无
			 */
			private function switchToPage(pageNum:uint):void{
				if(pageNum > totalPageCount || pageNum < 1){
					return;
				}else{
					doQueryByPageNun(pageNum);
				}
			}
			
			private function widgetClosedHandler(event:Event):void
			{
				map.removeLayer(graphicsLayer);
				this.showInfoWindow(null);
			}
			
			private function widgetOpenedHandler(event:Event):void
			{
				if (graphicsLayer)
				{
					map.addLayer(graphicsLayer);
				}
			}
			
			/**
			 * 启动正在忙碌的状态
			 */
			private function startBusyStatus():void
			{
				loadingStatusGroup.visible = true;
				loadingStatusGroup.includeInLayout = true;
			}
			/**
			 * 关闭正在忙碌的状态
			 */
			private function stopBusyStatus():void
			{
				loadingStatusGroup.visible = false;
				loadingStatusGroup.includeInLayout = false;
			}
		]]>
	</fx:Script>
	<viewer:SplitWidgetTemplate id="wTemplate" fontFamily="宋体"
								width="100%" height="100%"
								backgroundColor="#FFFFFF"
								closed="widgetClosedHandler(event)"
								open="widgetOpenedHandler(event)" >
		<viewer:layout>
			<s:VerticalLayout horizontalAlign="center" verticalAlign="top" paddingLeft="7" paddingRight="7"/>
		</viewer:layout>
		<s:VGroup id="inputGroup" width="100%" horizontalAlign="center" clipAndEnableScrolling="true" paddingTop="10">
			<s:VGroup id="advanceSearchGroup" width="100%"
					  visible="true" includeInLayout="true" gap="0">
				<s:BorderContainer width="100%" height="25" borderVisible="false"
								   backgroundColor="#F3F6FA">
					<s:layout>
						<s:HorizontalLayout horizontalAlign="left" verticalAlign="middle"
											paddingLeft="1" paddingRight="1"/>
					</s:layout>
					<mx:LinkButton label="类别" textAlign="left" 
								   fontFamily="宋体" fontSize="12" color="#4061ad"
								   rollOverColor="0x2B9DBF" textRollOverColor="0xFFFFFF"
							 	   fontWeight="normal" click="clickReturnToRootCatalog(event);"/>
					<mx:LinkButton id="catalogLabel" textAlign="left" 
								   right="0" color="0x015997" 
								   rollOverColor="0x2B9DBF" textRollOverColor="0xFFFFFF"
								   click="clickReturnToSubCatalog(event)" buttonMode="true"/>
					<mx:LinkButton id="subCatalogLabel"
								   rollOverColor="0x2B9DBF" textRollOverColor="0xFFFFFF"/>
				</s:BorderContainer>
				<s:BorderContainer id="catalogGroup" width="100%" height="65" 
								   borderVisible="true" borderColor="0xEBEBEB">
					<s:layout>
						<components:FlowLayout gapColumn="0" clipAndEnableScrolling="true"/>
					</s:layout>
				</s:BorderContainer>
			</s:VGroup>
		</s:VGroup>

		<!-- result-->
		<s:BorderContainer id="resultTip" width="100%" height="25" borderVisible="false"
						   includeInLayout="false" visible="false"
						   backgroundColor="#F3F6FA">
			<s:layout>
				<s:HorizontalLayout horizontalAlign="right" verticalAlign="middle" paddingRight="5"/>
			</s:layout>
			<s:Label text="共有" fontFamily="宋体"  verticalAlign="middle" fontSize="12" color="0x747678"/>
			<s:Label id="resultCountLabel" fontFamily="宋体"  verticalAlign="middle" fontSize="12" color="0xff8105"/>
			<s:Label text="条结果" fontFamily="宋体"  verticalAlign="middle" fontSize="12" color="0x747678"/>
		</s:BorderContainer>
		<s:BorderContainer width="100%" height="25" borderVisible="false" 
						   includeInLayout="false" visible="false"
						   backgroundColor="#E5EEFF" id="noResultGrp">
			<s:layout>
				<s:HorizontalLayout horizontalAlign="right" gap="18" verticalAlign="middle"  paddingRight="5"/>
			</s:layout>
			<s:Image source="assets/images/attention.png" />
			<s:Label text="没有搜到您要的信息" textAlign="left" fontFamily="宋体" color="#4a535f" fontSize="12" fontWeight="normal"/>
		</s:BorderContainer>
		<s:VGroup id="loadingStatusGroup" horizontalAlign="center" gap="5" includeInLayout="false" visible="false"
				  horizontalCenter="0" verticalCenter="0">
			<s:SWFLoader source="assets/images/loading.swf"/>
			<s:Label text="正在搜索..." fontFamily="宋体" fontSize="12" color="#4061ad"/>
		</s:VGroup>
		<s:Scroller width="100%" height="100%">
			<Search:SearchResultDataGroup id="searchResultDG" width="100%"
										  fontFamily="宋体" dataProvider="{searchResultAC}"
										  searchResultClick="clickSearchResult(event)">
				<Search:layout>
					<s:VerticalLayout gap="2"
									  horizontalAlign="justify"
									  useVirtualLayout="true"/>
				</Search:layout>
			</Search:SearchResultDataGroup>
		</s:Scroller>
		<s:Group width="100%">
			<s:Rect top="0" left="0" bottom="0" right="0">
				<s:fill>
					<s:SolidColor color="0xffffff" alpha="0"/>
				</s:fill>
			</s:Rect>
			<pageSelector:PagesSelector PageChanged="pageChangedHandler(event)" 
										pageCount="{this.PAGE_COUNT}" id="pagesSelector" horizontalCenter="0"/>
		</s:Group>
	</viewer:SplitWidgetTemplate>
</viewer:BaseWidget>