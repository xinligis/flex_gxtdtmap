<?xml version="1.0" encoding="utf-8"?>
<!--
     ////////////////////////////////////////////////////////////////////////////////
     //
     // Copyright (c) 2011 ESRI中国（北京）有限公司
     //共享服务技术支持部
     //版权所有.
     //2011-04-07
     ////////////////////////////////////////////////////////////////////////////////
-->
<viewer:BaseWidget xmlns:fx="http://ns.adobe.com/mxml/2009"
                   xmlns:s="library://ns.adobe.com/flex/spark"
                   xmlns:mx="library://ns.adobe.com/flex/mx"
                   xmlns:viewer="com.esri.viewer.*"
                   creationComplete="init()" top="15" bottom="15" left="15" right="15"
                   implements="com.esri.viewer.IInfowindowTemplate, com.esri.ags.components.supportClasses.IGraphicRenderer"
				   xmlns:sho="com.esri.viewer.components.sho.ui.*" xmlns:customskinbutton="com.esri.viewer.components.customskinbutton.*">

	<viewer:states>
		<s:State name="fromHereState"/>
		<s:State name="toHereState"/>
	</viewer:states>
	<!--viewer:transitions>
		<s:Transition fromState="*" toState="fromHereState">
			<mx:WipeRight target="{fromHereGroup}"/>
		</s:Transition>
		<s:Transition fromState="*" toState="toHereState">
			<mx:WipeRight target="{toHereGroup}"/>
		</s:Transition>
	</viewer:transitions-->
    <fx:Script>
        <![CDATA[
			import com.esri.ags.Graphic;
			import com.esri.ags.geometry.Extent;
			import com.esri.ags.geometry.Geometry;
			import com.esri.ags.geometry.MapPoint;
			import com.esri.ags.layers.GraphicsLayer;
			import com.esri.ags.tasks.QueryTask;
			import com.esri.ags.tasks.supportClasses.Query;
			import com.esri.ags.utils.GraphicUtil;
			import com.esri.viewer.*;
			import com.esri.viewer.AppEvent;
			import com.esri.viewer.IInfowindowTemplate;
			import com.esri.viewer.components.resizableTitleWindow.ResizableTitleWindow;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			import mx.controls.LinkButton;
			import mx.controls.SWFLoader;
			import mx.core.IFlexDisplayObject;
			import mx.core.IVisualElement;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.AsyncResponder;
			import mx.utils.StringUtil;
			
			import spark.components.VideoDisplay;
			import spark.components.VideoPlayer;
			import spark.events.IndexChangeEvent;
            private var _graphic:Graphic;
			//由哪个widget生成的，王红亮，2011-04-08
			private var _fromWidget:IBaseWidget;
            private var _layer:GraphicsLayer;
            private var _data:Object;
			private var _postprocessorWidgetID:Number; //后处理功能WidgetID
			//private var _postprocessorLabel:String;
			private var _queryURL:String; //用于智能感知的查询接口
            //private var _infoData:Object;
            //set info parameters
            [Bindable]
            private var _content:String = "";

            [Bindable]
            private var _title:String = "";
            private var _infoClass:Class;
			private var mappointPostprocessorArray:ArrayCollection;
			private var polylinePostprocessorArray:ArrayCollection;
			private var polygonPostprocessorArray:ArrayCollection;
			private var _currentPostprocessorArray:ArrayCollection = null;
			private var _postprocessorType:String = ""; //后处理的类型
			private var _routeGraphic:Graphic = null;
			//路径分析配置内容
			private var routeConfig:Object;
			[Bindable]
			private var queryResultAC:ArrayCollection;
			
			private var queryTask:QueryTask;
			private var query:Query;
			private const ICON_URL:String = "assets/images/infowindow/"
            public function set infoClass(value:Class):void
            {
                _infoClass = value;
            }

            public function get infoClass():Class
            {
                return _infoClass;
            }

			
//			public override function set data(value:Object):void
//			{
//				super.data=value;
//				if(data!=null)
//				{
//					if(!this.initialized)
//					{
//						this.addEventListener(FlexEvent.CREATION_COMPLETE,setDataAfterInitalized);
//						return;
//					}
//					setInfoParameters(null);
//				}
//			}
//			
//			private function setDataAfterInitalized(event:Object):void
//			{
//				this.removeEventListener(FlexEvent.CREATION_COMPLETE,setDataAfterInitalized);
//				setInfoParameters(null);
//			}
			
            private function init():void
            {
                this.addEventListener(FlexEvent.DATA_CHANGE, setInfoParameters);
                infoClass = CameraInfoWidget;
                setInfoParameters(null);
				map.infoWindow.addEventListener(Event.CLOSE, infoWindow_closeHandler);
				//路径参数中起止的点的查询
				if(routeConfig)
				{
					queryTask = new QueryTask();
					queryTask.useAMF = false;
					queryTask.url = routeConfig.queryURL;
					query = new Query();
					query.returnGeometry = false;
					query.outFields = [routeConfig.titleField];
				}
            }
			private function infoWindow_closeHandler(event:Event):void
			{
				infoImage.source = "";
				infoImage.visible = false;
				infoImage.includeInLayout = false;
				infoLink.visible = false;
				infoLink.includeInLayout = false;
				if(video.playing)
				{
					video.stop();
				}
				video.source = "";
				video.visible = false;
				video.includeInLayout = false;

				swfLoader.source = "";
				swfLoader.visible = false;
				swfLoader.includeInLayout = false;
			}
            public function set graphic(value:Graphic):void
            {
                _graphic = value;
                _layer = _graphic.graphicsLayer;
            }

            public function set infoConfig(value:XML):void
            {
				if(this.configXML == null)
				{
					return;
				}
				var strIcon:String = "";
				var strLabel:String = "";
				var strWidget:String = "";
				var processorObject:Object = null;
				var processor:XML = null;
				//添加点状地物的后处理功能配置信息
				if(mappointPostprocessorArray == null)
						mappointPostprocessorArray = new ArrayCollection();
				
				for each(processor in configXML.mappoint.postprocessor)
				{
					strIcon = processor.icon;
					strLabel = processor.label;
					strWidget = processor.widget;
					processorObject = new Object();
					processorObject.icon = strIcon;
					processorObject.label = strLabel;
					processorObject.widget = strWidget;
					mappointPostprocessorArray.addItem(processorObject);
					
				}
				//添加路径分析功能配置信息
				processor = this.configXML.mappoint.route[0];
				if(routeConfig == null)
				{
					routeConfig = new Object();
				}
				if(processor)
				{
					strLabel = processor.label;
					strWidget = processor.widget;
					var includeIn:String = processor.@includeIn;
					var url:String = processor.queryURL;
					var titleField:String = processor.titlefield;
					var queryExp:String = processor.expression;
					routeConfig.includeIn = includeIn;
					routeConfig.queryURL = url;
					routeConfig.label = strLabel;
					routeConfig.widget = strWidget;
					routeConfig.titleField = titleField;
					routeConfig.queryExp = queryExp;
					routeConfig.buswidget = String(processor.buswidget);
				}
				//添加线状地物的后处理功能配置信息
				if(polylinePostprocessorArray == null)
					polylinePostprocessorArray = new ArrayCollection();
				
				for each(processor in configXML.polyline.postprocessor)
				{
					strLabel = processor.label;
					strWidget = processor.widget;
					processorObject = new Object();
					processorObject.label = strLabel;
					processorObject.widget = strWidget;
					polylinePostprocessorArray.addItem(processorObject);
					
				}
				//添加面状地物的后处理功能配置信息
				if(polygonPostprocessorArray == null)
					polygonPostprocessorArray = new ArrayCollection();
				
				for each(processor in configXML.polygon.postprocessor)
				{
					strLabel = processor.label;
					strWidget = processor.widget;
					processorObject = new Object();
					processorObject.label = strLabel;
					processorObject.widget = strWidget;
					polygonPostprocessorArray.addItem(processorObject);
					
				}
            }

			private function onClickPostprocessor(event:MouseEvent):void
			{
				if(configData == null)
					return;
				var strLabel:String = "";
				if(event.currentTarget is LinkButton)
				{
					var linkButton:LinkButton = event.currentTarget as LinkButton;
					strLabel = linkButton.label;
				}
				else if(event.currentTarget is Image)
				{
					var image:Image = event.currentTarget as Image;
					strLabel = image.toolTip;
				}
				else
				{
					return;
				}
				var processor:Object = null;
				for each(processor in _currentPostprocessorArray)
				{
					if(processor.label == strLabel)
					{
						//加载功能widget
						runWidget(processor.widget);
						break;
					}
				}
			}
			
			/*
			*功能：为地物添加后处理功能
			*参数：无
			作者：王红亮，2011-04-12
			返回：无
			*/
			private function runWidget(url:String):void
			{
				_postprocessorWidgetID = -1;
				for each(var widget:Object in configData.widgets)
				{
					if(widget.url == url)
					{
						_postprocessorWidgetID = widget.id;
						//添加对widget打开状态的监听
						AppEvent.addListener(AppEvent.WIDGET_STATE_CHANGED, onOpenedPostprocessor);
						//开启需要进一步处理的widget
						AppEvent.dispatch(AppEvent.WIDGET_RUN,widget.id);
						break;
					}
				}
			}
			//用于后处理的Widget加载并打开之后，向该widget发送要处理的数据
			//王红亮，2010-04-08
			private function onOpenedPostprocessor(event:AppEvent):void
			{
				if(event.data.state as String == WidgetStates.WIDGET_OPENED && _postprocessorWidgetID == event.data.id as Number)
				{
					var data:Object = new Object();
					data.postprocessor = _postprocessorWidgetID;
					data.name = _title;
					switch(_postprocessorType)
					{
						case "toHere":
							var fromGraphic:Graphic = startInput.selectedItem as Graphic;
							if(fromGraphic)
							{
								data.startGraphic = new Graphic(fromGraphic.geometry, null, fromGraphic.attributes);
							}
							data.startName = startInput.text;
							if(_graphic)
							{
								data.toGraphic = new Graphic(_graphic.geometry, null, _graphic.attributes);
							}

							data.toName = _title;
							break;
						case "fromHere":
							if(_graphic)
							{
								data.startGraphic = new Graphic(_graphic.geometry, null, _graphic.attributes);
							}
							data.startName = _title;
							var endGraphic:Graphic = endInput.selectedItem as Graphic;
							if(endGraphic)
							{
								data.toGraphic = new Graphic(endGraphic.geometry, null, endGraphic.attributes);
							}
							data.toName = endInput.text;
							break;
						default:
							data.graphic = _graphic;
					}
					AppEvent.dispatch(AppEvent.POST_PROCESS, data);
					//源widget和目标widget不一致时，关闭源widget
					//wanghl, 2011-08-06
					if(_fromWidget && _fromWidget.widgetId != this._postprocessorWidgetID)
					{
						_fromWidget.setState(WidgetStates.WIDGET_CLOSED);
					}
					
					//已完成数据发送，不再对widget的打开状态进行监听
					AppEvent.removeListener(AppEvent.WIDGET_STATE_CHANGED, onOpenedPostprocessor);
				}
			}
            private function setInfoParameters(event:FlexEvent):void
            {
                if (data == null)
                {
                    return;
                }

                _title = data.title || "";
                _content = data.content;
				_graphic = data.graphic;
				_fromWidget = data.fromWidget as IBaseWidget;

				//根据几何类型的不同加载不同的后处理项
				if(_graphic && _graphic.geometry)
				{
					switch(_graphic.geometry.type)
					{
						case com.esri.ags.geometry.Geometry.MAPPOINT:
							this.addPostprocessors(this.mappointPostprocessorArray);
							
							//添加路径分析功能链接
							if(routeConfig && routeConfig.includeIn == "true")
							{
								routeGroup.visible = true;
								routeGroup.includeInLayout = true;
							}
							_currentPostprocessorArray = this.mappointPostprocessorArray;
							break;
						case com.esri.ags.geometry.Geometry.POLYLINE:
							this.addPostprocessors(this.polylinePostprocessorArray);
							_currentPostprocessorArray = polylinePostprocessorArray;
							break;
						case com.esri.ags.geometry.Geometry.POLYGON:
							this.addPostprocessors(this.polygonPostprocessorArray);
							_currentPostprocessorArray = polygonPostprocessorArray;
							break;
					}
				}
                if (_content)
                {
					var numCount:int = _content.split("\n").length;
					infoContent.visible = true;
					infoContent.height = numCount*24;
                }

                //clear picture and link button
                infoImage.source = "";
                infoImage.visible = false;
                infoImage.includeInLayout = false;
                infoLink.visible = false;
                infoLink.includeInLayout = false;
				video.source = "";
				video.visible = false;
				video.includeInLayout = false;
				swfLoader.source = "";
				swfLoader.visible = false;
				swfLoader.includeInLayout = false;
                if (data.multimedia)//多媒体信息
                {
                    var multimedia:String = data.multimedia as String;
					if(StringUtil.trim(multimedia) != "")
					{
						var pos:Number = multimedia.length - 4;
	                    var sfx:String = multimedia.substr(pos, 4).toLowerCase();
	                    if ((sfx == ".jpg") || (sfx == ".png") || (sfx == ".gif")|| (sfx == ".bmp"))
	                    {
	                        infoImage.source = multimedia;
	                        infoImage.visible = true;
	                        infoImage.includeInLayout = true;
	                    }
						else if(sfx == ".flv" || sfx==".f4v")
						{
							video.source = multimedia;
							video.height = 150;
							video.visible = true;
							video.includeInLayout = true;
							video.play();
						}
						else if(sfx == ".swf")
						{
							swfLoader.visible = true;
							swfLoader.includeInLayout = true;
							swfLoader.source = multimedia;

						}
					}
                }
				if(data.link) //网页链接信息
				{
					var link:String = data.link as String;
					link = StringUtil.trim(link);
					if(link != "")
					{
						infoLink.visible = true;
						infoLink.includeInLayout = true;
					}
				}
            }

            //show link
            private function showLink():void
            {
                navigateToURL(new URLRequest(StringUtil.trim(data.link)));
            }
			private function OnHide():void
			{
				//video.stop();
			}
			private function OnShow():void
			{
				//video.play();
			}

			/**
			*功能：为地物添加后处理功能，如果对应有图标，则以图标表示，否则以带标题的linkbuton表示
			*@param processors 后处理参数信息的数组
			*@author 王红亮，2011-04-12
			*@return 无
			*/
			private function addPostprocessors(processors:ArrayCollection):void
			{

				//添加后处理功能链接
				//这是原来的代码；2011-8-6；温杨彪
				/* if(processors && processors.length > 0)
				{
					postprocessorGroup.visible = true;
					postprocessorGroup.includeInLayout = true;
					postprocessorGroup.removeAllElements();
				} */
				
				//添加后处理功能链接
				//如果没有后处理按钮，加上“缩放至此按钮”
				 
//				postprocessorGroup.visible = true;
//				postprocessorGroup.includeInLayout = true;
//				postprocessorGroup.removeAllElements();
				for each(var processor:Object in processors)
				{
					if(processor.icon && processor.icon != "") //以图标的方式显示
					{
						var image:Image = new Image();
						image.source = processor.icon;
						image.buttonMode = true;
						image.toolTip = processor.label;
						image.addEventListener(MouseEvent.CLICK, onClickPostprocessor);
//						postprocessorGroup.addElement(image);
					}
					else
					{
						var linkButton:LinkButton = new LinkButton();
						linkButton.label = processor.label;
						linkButton.setStyle("color", 0x0000FF);
						linkButton.setStyle("textDecoration", "underline");
						linkButton.addEventListener(MouseEvent.CLICK, onClickPostprocessor);
//						postprocessorGroup.addElement(linkButton);
					}

				}
//				postprocessorGroup.addElement(toExtentImg);

			}
			

			/**显示从这里出发输入组
			 * @param event 鼠标事件
			 * @return 无
			 * 2011-07-21
			 */
			private function onClickFromImage(event:MouseEvent):void
			{
				this.currentState = "fromHereState";
			}

			/**显示到这里出发输入组
			 * @param event 鼠标事件
			 * @return 无
			 * 2011-07-21
			 */
			private function onClickToImage(event:MouseEvent):void
			{
				this.currentState = "toHereState";
			}
			
			/**
			*功能：调出路径分析功能，进行路径查找
			*@param name,名称的开头部分；
			*@author 王红亮，2011-04-12
			*@return 无
			*/
			private function onClickDrive(event:MouseEvent):void
			{
				
				if(currentState == "fromHereState" && endInput.text == "")
					{
					Alert.show("终点不能为空");
					return;
				}
				else if(currentState == "toHereState" && startInput.text == "")
				{
					Alert.show("起点不能为空");
					return;
				}
				_postprocessorType = (this.currentState == "fromHereState") ? "fromHere" : "toHere";
				runWidget(routeConfig.widget);
				
			}
			private function onClickBus(event:MouseEvent):void
			{

				if(currentState == "fromHereState" && endInput.text == "")
				{
					Alert.show("终点不能为空");
					return;
				}
				else if(currentState == "toHereState" && startInput.text == "")
				{
					Alert.show("起点不能为空");
					return;
				}
				_postprocessorType = (this.currentState == "fromHereState") ? "fromHere" : "toHere";
				runWidget(routeConfig.buswidget);
			}
			
			private var _currentInput:CompletionInput;
			/**
			*功能：查询名称中以name开头的所有地物
			* @param name,名称的开头部分；
			* 2011-04-12
			* @return 无
			*/
			private function queryPartialName(control: CompletionInput, prefix: String) : int 
			{
				_currentInput = control;
				query.returnGeometry = true;
				var strExpr:String = routeConfig.queryExp;
				query.where = strExpr.replace("[value]", prefix);
				queryTask.execute(query, new AsyncResponder(onResult, onFault));
				return CompletionInput.COMPLETION_ASYNC;
				// on result
				function onResult(featureSet:com.esri.ags.FeatureSet, token:Object = null):void
				{
					try
					{
						var resultArray:Array = [];
						var len:uint = featureSet.features.length;
						len = len > 30 ? 30 : len;
						var graphic:Graphic;
						for(var index:uint = 0; index < len; ++index)
						{
							graphic = featureSet.features[index];
							var info:Object = {item:graphic, label:graphic.attributes[routeConfig.titleField], index:index};
							resultArray.push(info);
						}
						//textInput.updateDataProvider();
						_currentInput.completions = resultArray;
						_currentInput.displayCompletions(0);
					}
					catch (error:Error)
					{
						
					}
					
				}
				
				//on fault
				function onFault(info:Object, token:Object = null):void
				{
					
				}
			}
			
			/**创建弹出窗口，用以显示图片或播放视频
			 * @param type <String> image,图片；video,视频
			 * @param source <String> 图片或视频的地址
			 */
			private function createPopUp(type:String, source:String):void
			{

				if(source == null || source == "")
					return;
				var rtw:ResizableTitleWindow = new ResizableTitleWindow();
				rtw.width = 600;
				rtw.height = 600;
				//var hgroup:HGroup = new HGroup();
				//hgroup.percentHeight = 100;
				//hgroup.percentWidth = 100;
				//hgroup.top = 0;
				//hgroup.bottom = 0;
				
				//hgroup.horizontalAlign = "center";
				//rtw.addElement(hgroup);
				var element:IVisualElement;
				if(type == "image")
				{
					var image:Image = new Image();
					rtw.addElement(image);
					image.source = source;
					element = image;
				}
				else if(type == "video")
				{
					var video:VideoPlayer = new spark.components.VideoPlayer();
					//video.width = 800;
					//video.height 600;
					rtw.addElement(video);
					video.source = source;
					element = video;
				}
				else if(type == "swfloader")
				{
					var loader:SWFLoader = new SWFLoader();
					//loader.width = 600;
					//loader.width 450;
					//loader.scaleContent = true;
					//loader.top = loader.bottom = 5;
					//loader.left = loader.right = 5;
					rtw.addElement(loader);
					//添加至容器之后，再设置source，可以支持中文路径
					loader.source = source;
					element = loader;

				}
				else
				{
					return;
				}

				rtw.title = _title || "";
				element.top = element.bottom = 5;
				element.left = element.right = 5;
				//element.percentWidth = 100;
				//element.percentHeight = 100;
				rtw.addEventListener("close", titleWindow_closeHandler);


				PopUpManager.addPopUp(rtw, this, true);
				PopUpManager.centerPopUp(rtw);
			}
			
			private function titleWindow_closeHandler(event:Event):void
			{
				event.target.removeEventListener("close", titleWindow_closeHandler);
				PopUpManager.removePopUp(event.target as IFlexDisplayObject);
			}
			
			/**点击图片，弹出大小可变化的窗体，放大显示当前图片
			 * @event 鼠标点击事件
			 */
			private function infoImage_clickHandler(event:MouseEvent):void
			{
				createPopUp("image", infoImage.source.toString());
			}
			
			/**点击视频，弹出大小可变化的窗体，放大播放当前视频
			 * @event 鼠标点击事件
			 */
			private function video_clickHandler(event:MouseEvent):void
			{
				video.pause();
				createPopUp("video", video.source.toString());
			}	
			
			private function swfLoader_clickHandler(event:MouseEvent):void
			{
				createPopUp("swfloader", swfLoader.source.toString());
			}

			protected function button1_clickHandler(event:MouseEvent):void
			{
				if(data.graphic)
				{
					var gra:Graphic = data.graphic;
					if(gra.geometry)
					{
						switch(gra.geometry.type)
						{
							case com.esri.ags.geometry.Geometry.MAPPOINT:
								if(configXML.zoom)
								{
									var zoom:int = Number(configXML.zoom);
									if(zoom<map.scale)
										map.scale = zoom;
								}
								map.centerAt(gra.geometry as MapPoint);
								break;
							case com.esri.ags.geometry.Geometry.POLYLINE:
							case com.esri.ags.geometry.Geometry.POLYGON:
								map.extent = gra.geometry.extent.expand(1.5);
								break;
						}
					}
				}
			}

			protected function tabbar1_changeHandler(event:IndexChangeEvent):void
			{
				// TODO Auto-generated method stub
				if(event.newIndex == 0)
				{
					this.currentState = "fromHereState";
				}
				else
				{
					this.currentState = "toHereState";
				}
			}
			
			protected function infoContent_updateCompleteHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				infoContent.height = infoContent.contentHeight;
			}
			
		]]>
    </fx:Script>
<fx:Declarations>
	<mx:Image source="@Embed('assets/images/infowindow/toExtent.png')" click="button1_clickHandler(event)" buttonMode="true" useHandCursor="true" id="toExtentImg"/>
</fx:Declarations>
    <s:SkinnableContainer id="infoCanvas"
             width="310"  minHeight="30"
			 backgroundColor="0xffffff" >
        <s:layout>
            <s:VerticalLayout gap="10"
                              horizontalAlign="left"
                              paddingBottom="4"
                              paddingLeft="15"
                              paddingRight="15"
                              paddingTop="10"/>
        </s:layout>
        <s:Label id="infoTitle"
                            width="100%"
                            text="{_title}" fontSize="14" color="0x015997"
							fontWeight="bold" fontFamily="宋体"
                            visible="{_title==''?false:true}" includeInLayout="{_title==''?false:true}"/>
		<mx:Image id="infoImage"
				  width="260" height="140"
				  buttonMode="true"
				  click="infoImage_clickHandler(event);"
				  includeInLayout="false"
				  maxWidth="{infoCanvas.width - 10}"
				  useHandCursor="true"
				  visible="false"/>
		<s:VideoDisplay id="video" visible="false" includeInLayout="false" height="140" width="260" 
					 scaleMode="stretch" 
						 hide="OnHide()" show="OnShow()" click="video_clickHandler(event);" />
		<s:SkinnableContainer width="270">
			<s:layout>
				<s:VerticalLayout horizontalAlign="center"/>
			</s:layout>
			<mx:SWFLoader id="swfLoader"
						  height="140" width="140"
						  visible="false" includeInLayout="false"
						  click="swfLoader_clickHandler(event);"/>
		</s:SkinnableContainer>
		<s:RichEditableText id="infoContent" minHeight="30" width="290" textAlign="justify" verticalAlign="middle"
							text="{_content}" color="0x535353" fontFamily="微软雅黑,宋体,Arial"
							leadingModel="ascentDescentUp" lineHeight="10" focusedTextSelectionColor="#54bcfd"
							visible="true" editable="false" maxHeight="200" updateComplete="infoContent_updateCompleteHandler(event)"/>
		<!--<s:TextArea id="infoContent" contentBackgroundAlpha="0" textAlign="justify" minHeight="30" verticalAlign="middle"
						width="290" editable="false" borderVisible="false" selectable="true"
						/>-->
        <s:Label id="infoLink"
                 width="100%" text="详细信息>>"
                 buttonMode="true" click="showLink()"
                 includeInLayout="false"
                 maxDisplayedLines="1"
                 showTruncationTip="true"
                 textDecoration="underline"
                 visible="false"/>
		

		<s:VGroup id="routeGroup" width="100%" visible="false" gap="5" includeInLayout="true" horizontalAlign="left">
			<!--<s:Group width="100%">
				<mx:Image id="fromImage" left="0" top="0" 
						  source.fromHereState ="{ICON_URL + 'selected_tab.png'}" source.toHereState="{ICON_URL + 'unselected_tab.png'}"
						/>
				<s:Label left="0" top="5" width="{fromImage.width}" height="{fromImage.height}"
						 text="从这里出发" textAlign="center" fontFamily="宋体"
						 buttonMode="true" click="onClickFromImage(event);"/>
				<mx:Image id="toImage" left="{fromImage.width + 3}"
						  source.fromHereState ="{ICON_URL + 'unselected_tab.png'}" source.toHereState="{ICON_URL + 'selected_tab.png'}"
						  />
				<s:Label left="{fromImage.width + 3}" top="5" width="{toImage.width}"
						 text="到这里来" textAlign="center" fontFamily="宋体"
						 buttonMode="true" click="onClickToImage(event);"/>
			</s:Group>-->
			<s:TabBar skinClass="widgets.InfoTemplates.TabBarSkin"
					  width="190" fontFamily="宋体" change="tabbar1_changeHandler(event)">
				<s:dataProvider>
					<s:ArrayList>
						<fx:String>从这里出发</fx:String>
						<fx:String>到这里来</fx:String>
					</s:ArrayList>
				</s:dataProvider>
			</s:TabBar>
			<s:Group width="100%">
				<s:Rect left="0" top="0" right="0" bottom="0">
					<s:stroke>
						<s:SolidColorStroke color="#00598E" weight="1"/>
					</s:stroke>
				</s:Rect>
				<s:HGroup id="fromHereGroup" top="8" left="8" right="8" bottom="8" gap="0" verticalAlign="middle"
						  visible="false" visible.fromHereState="true">
					<s:Label text="终点：" textAlign="right" color="0x535353"/>
					<sho:CompletionInput id="endInput" width="100%" keepLocalHistory="false" skinClass="com.esri.viewer.skins.CommonTextInputSkin"
										 completionFunction="queryPartialName" contentBackgroundColor="0xffffff"
										 prompt="请输入目的地"/>
					<!--<s:Spacer width="5"/>
					<customskinbutton:ClickButton buttonType="normalTowState" height="25"
												  label="驾车" click="onClickDrive(event);"/>-->
					<s:Spacer width="5"/>
					<customskinbutton:ClickButton buttonType="normalTowState" height="25"
												  label="公交" click="onClickBus(event);"/>
				</s:HGroup>
				<s:HGroup id="toHereGroup" top="8" left="8" right="8" bottom="8" gap="0" verticalAlign="middle"
						  visible="false" visible.toHereState="true">
					<s:Label text="起点：" textAlign="right" color="0x535353"/>
					<sho:CompletionInput id="startInput" width="100%" keepLocalHistory="false" completionFunction="queryPartialName"
										 skinClass="com.esri.viewer.skins.CommonTextInputSkin" contentBackgroundColor="0xffffff"
										 prompt="请输入起点"/>
					<!--<s:Spacer width="5"/>
					<customskinbutton:ClickButton buttonType="normalTowState" height="25"
												  label="驾车" click="onClickDrive(event);"/>-->
					<s:Spacer width="5"/>
					<customskinbutton:ClickButton buttonType="normalTowState" height="25"
						label="公交" click="onClickBus(event);"/>
					<!--<s:Button label="驾车" click="onClickDrive(event);" visible="false" includeInLayout="false"/>-->
					<!--<s:Button label="公交" click="onClickBus(event);" />-->
				</s:HGroup>
			</s:Group>
		</s:VGroup>
    </s:SkinnableContainer>

</viewer:BaseWidget>
