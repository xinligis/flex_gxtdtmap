<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" 
		 xmlns:ui="com.esri.viewer.components.sho.ui.*"
		 creationComplete="group1_creationCompleteHandler(event)"
		 xmlns:customskinbutton="com.esri.viewer.components.customskinbutton.*">
	<fx:Metadata>
		/**
		 * 用户输入提示查询事件
		 **/
		[Event(name="assetWordQuery",type="widgets.NetworkAnalyst.NAEvent")]
		/**
		 * 查询实际Graphic事件
		 **/
		[Event(name="queryGraphic",type="widgets.NetworkAnalyst.NAEvent")]
		/**
		* 使用鼠标画Graphic事件
		**/
		[Event(name="drawGraphic",type="widgets.NetworkAnalyst.NAEvent")]
		
		/**
		* 删除途经点事件
		**/
		[Event(name="deletePassGraphic",type="widgets.NetworkAnalyst.NAEvent")]
		
		/**
		 * 重置输入参数并清除结果事件
		 **/
		[Event(name="resetAndCleanAll",type="widgets.NetworkAnalyst.NAEvent")]
		
		/**
		 * 执行事件
		 **/
		[Event(name="submit",type="widgets.NetworkAnalyst.NAEvent")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import com.esri.ags.FeatureSet;
			import com.esri.ags.Graphic;
			import com.esri.ags.Map;
			import com.esri.ags.events.DrawEvent;
			import com.esri.ags.tools.DrawTool;
			import com.esri.viewer.utils.Hashtable;
			
			import mx.controls.Alert;
			import mx.core.IVisualElement;
			import mx.events.FlexEvent;
			import mx.utils.StringUtil;
			
			import spark.components.Label;
			
			import widgets.NetworkAnalyst.NAEvent;
			import widgets.NetworkAnalyst.NetworkAnalystWidget;
			import widgets.NetworkAnalyst.SubmitInfo;
			
			
			/**
			 * 输入框提示查询后，返回的提示FeatureSet;
			 **/
			public var assetsFeatureSet:FeatureSet = null;
			
			private var _pickerArray:Array = [];
			
			private var _map:Map = null;
			
			private var _drawTool:DrawTool = null;
			
			/**
			 * 当前绘制类型，起点、终点还是途径点
			 **/
			private var _currentDrawType:String;
			
			/**
			 * 途经点的自增序列
			 */
			private var _passSequence:int = 1;
			
			/**
			 * 途经点的序列id表
			 **/
			private var _id2passPtTable:Hashtable;
			
			/**
			 * 途经点输入框与途经点ID的映射
			 **/
			private var _passInput2passPtId:Hashtable;
			
			/**
			 * 当前的途经点拾取按钮
			 **/
			private var _currentPassPicker:CheckButton;
			
			public function set map(value:Map):void
			{
				_map = value;
			}
			
			public function get map():Map
			{
				return _map;
			}
			[Bindable]
			[Embed('assets/images/networkanalyst/picker_normal.png')]
			private var pickerNormalClass:Class;
			[Bindable]
			[Embed('assets/images/networkanalyst/picker_over.png')]
			private var pickerOverClass:Class;
			[Bindable]
			[Embed('assets/images/networkanalyst/picker_checked.png')]
			private var pickerSelectedClass:Class;
			[Bindable]
			[Embed('assets/images/w_close_red2.png')]
			private var deleteNormalClass:Class;
			[Bindable]
			[Embed('assets/images/w_close_red.png')]
			private var deleteOverClass:Class;
			
			[Embed('assets/images/networkanalyst/passImage.png')]
			private var passImageClass:Class;
			
			[Bindable]
			[Embed('assets/images/networkanalyst/search_normal.png')]
			private var searchNormalClass:Class;
			
			[Bindable]
			[Embed('assets/images/networkanalyst/search_over.png')]
			private var searchOverClass:Class;
			
			private function queryAssetWords(control: CompletionInput, prefix: String):void
			{
				var event:NAEvent = new NAEvent(NAEvent.ASSET_WORDS_QUERY_EVENT);
				event.completionInput = control;
				event.inputPrefix = prefix;
				dispatchEvent(event);
			}
			
			protected function startInput_changeHandler(event:Event):void
			{
				if(assetsFeatureSet !=null && startInput.selectedIndex!=-1)
				{
					var g:Graphic = assetsFeatureSet.features[startInput.selectedIndex];
					dispatchQueryGraphicEntityEvent(g,NetworkAnalystWidget.GRAPHIC_TYPE_START);
				}
			}
			
			protected function endInput_changeHandler(event:Event):void
			{
				if(assetsFeatureSet !=null && endInput.selectedIndex!=-1)
				{
					var g:Graphic = assetsFeatureSet.features[endInput.selectedIndex];
					dispatchQueryGraphicEntityEvent(g,NetworkAnalystWidget.GRAPHIC_TYPE_END);
				}
			}
			
			protected function passInput_changeHandler(event:Event):void
			{
				var input:CompletionInput = event.target as CompletionInput;
				if(assetsFeatureSet != null && input.selectedIndex != -1)
				{
					var g:Graphic = assetsFeatureSet.features[input.selectedIndex];
					g.attributes.passid = _passSequence;
					_id2passPtTable.add(g.attributes.passid,g);
					_passInput2passPtId.add(input,g.attributes.passid);
					_passSequence++;
					dispatchQueryGraphicEntityEvent(g,NetworkAnalystWidget.GRAPHIC_TYPE_PASS);
				}
			}
			
			/**
			 * 用户从提示下拉框选择文本后，发送查询选择的Graphic实体消息
			 **/
			private function dispatchQueryGraphicEntityEvent(g:Graphic,type:String):void
			{
				var naEvent:NAEvent = new NAEvent(NAEvent.QUERY_GRAPHIC_EVENT);
				naEvent.queryGraphic = g;
				naEvent.queryGraphicType = type;
				dispatchEvent(naEvent);
			}
			
			protected function group1_creationCompleteHandler(event:FlexEvent):void
			{
				startInput.addEventListener(Event.COMPLETE, startInput_changeHandler);
				endInput.addEventListener(Event.COMPLETE, endInput_changeHandler);
				_drawTool = new DrawTool(_map);
				_drawTool.addEventListener(DrawEvent.DRAW_END,draw_endHandler);
				_id2passPtTable = new Hashtable();
				_passInput2passPtId = new Hashtable();
			}
			
			protected function startPicker_checkChangeHandler(event:Event):void
			{
				if(startPicker.checked)
				{
					//让其他点选按钮处于释放状态
					for each(var btn:CheckButton in _pickerArray)
					{
						btn.checked = false;
					}
					endPicker.checked = false;
					barrierPicker.checked = false;
					_currentDrawType = NetworkAnalystWidget.GRAPHIC_TYPE_START;
					_drawTool.activate(DrawTool.MAPPOINT);
				}
				else
				{
					_drawTool.deactivate();
				}
			}
			
			protected function endPicker_checkChangeHandler(event:Event):void
			{
				if(endPicker.checked)
				{
					//让其他点选按钮处于释放状态
					for each(var btn:CheckButton in _pickerArray)
					{
						btn.checked = false;
					}
					startPicker.checked = false;
					barrierPicker.checked = false;
					_currentDrawType = NetworkAnalystWidget.GRAPHIC_TYPE_END;
					_drawTool.activate(DrawTool.MAPPOINT);
				}
				else
				{
					_drawTool.deactivate();
				}
			}
			
			private function draw_endHandler(event:DrawEvent):void
			{
				if(event.graphic == null)
					return;
				var g:Graphic = event.graphic;
				switch(_currentDrawType)
				{
					case NetworkAnalystWidget.GRAPHIC_TYPE_START:
						startInput.text = "手动绘制";
						startPicker.checked = false;
						break;
					case NetworkAnalystWidget.GRAPHIC_TYPE_END:
						endInput.text = "手动绘制";
						endPicker.checked = false;
						break;
					case NetworkAnalystWidget.GRAPHIC_TYPE_BARRIER:
						barrierPicker.checked = false;
						break;
					case NetworkAnalystWidget.GRAPHIC_TYPE_PASS:
						var input:CompletionInput = _currentPassPicker.parent.getChildAt(1) as CompletionInput;
						input.text = "手动绘制";
						g.attributes = new Object();
						g.attributes.passid = _passSequence;
						_passSequence++;
						_currentPassPicker.checked = false;
						_id2passPtTable.add(g.attributes.passid,g);
						_passInput2passPtId.add(input,g.attributes.passid);
						break;
				}
				
				var naEvent:NAEvent = new NAEvent(NAEvent.DRAW_GRAPHIC_EVENT);
				naEvent.drawType = _currentDrawType;
				naEvent.drawGraphic = g;
				_drawTool.deactivate();
				dispatchEvent(naEvent);
			}
			
			protected function barrierPicker_checkChangeHandler(event:Event):void
			{
				if(barrierPicker.checked)
				{
					//让其他点选按钮处于释放状态
					for each(var btn:CheckButton in _pickerArray)
					{
						btn.checked = false;
					}
					startPicker.checked = false;
					endPicker.checked = false;
					_currentDrawType = NetworkAnalystWidget.GRAPHIC_TYPE_BARRIER;
					_drawTool.activate(DrawTool.POLYGON);
				}
				else
				{
					_drawTool.deactivate();
				}
			}
			
			protected function passPicker_checkChangeHandler(event:Event):void
			{
				var checkBtn:CheckButton = event.target as CheckButton;
				if(checkBtn.checked)
				{
					//释放其他绘制工具按钮
					startPicker.checked = false;
					endPicker.checked = false;
					barrierPicker.checked = false;
					for each(var btn:CheckButton in _pickerArray)
					{
						if(btn == checkBtn)
							continue;
						btn.checked = false;
					}
					_currentDrawType = NetworkAnalystWidget.GRAPHIC_TYPE_PASS;
					_drawTool.activate(DrawTool.MAPPOINT);
					_currentPassPicker = checkBtn;
				}
				else
				{
					_drawTool.deactivate();
				}
			}
			
			protected function deleteBtn_clickHandler(event:MouseEvent):void
			{
				var clickBtn:ClickButton = event.target as ClickButton;
				var input:CompletionInput = clickBtn.parent.getChildAt(1) as CompletionInput;
				var id:int = _passInput2passPtId.find(input);
				if(id>0)
				{
					var naEvent:NAEvent = new NAEvent(NAEvent.DELETE_PASS_GRAPHIC_EVENT);
					naEvent.deletePassGraphicId = id;
					dispatchEvent(naEvent);
					_passInput2passPtId.remove(id);
					_id2passPtTable.remove(id);
				}
				var index:int = _pickerArray.indexOf(clickBtn.parent.getChildAt(2));
				_pickerArray.splice(index,1);
				passGroup.removeElement(input.parent as IVisualElement);
			}
			
			protected function addPassButton_clickHandler(event:MouseEvent):void
			{
				var hgroup:HGroup = new HGroup();
				hgroup.percentWidth = 100;
				hgroup.verticalAlign = "middle";
				hgroup.gap = 10;
//				var label:Label = new Label();
//				label.text = "途径点：";
//				label.setStyle("textAlign", "right");
//				label.setStyle("color", 0x535353);
//				label.setStyle("fontWeight", "bold");
				var image:Image = new Image();
				image.source = passImageClass;
				hgroup.addElement(image);
				var input:CompletionInput = new CompletionInput();
				input.percentWidth = 100;
				input.completionFunction = queryAssetWords;
				input.addEventListener(Event.COMPLETE, passInput_changeHandler);
				input.addEventListener(FocusEvent.FOCUS_IN,passInput_focusInHandler);
				hgroup.addElement(input);
				//添加绘制点图标
				var checkBtn:CheckButton = new CheckButton();
				checkBtn.setStyle("normalImage",pickerNormalClass);
				checkBtn.setStyle("overImage",pickerOverClass);
				checkBtn.setStyle("selectedImage",pickerSelectedClass);
				checkBtn.addEventListener("checkChange",passPicker_checkChangeHandler);
				_pickerArray.push(checkBtn);
				hgroup.addElement(checkBtn);
				
				//添加删除经过点图标
				var clickBtn:ClickButton = new ClickButton();
				clickBtn.setStyle("normalImage",deleteNormalClass);
				clickBtn.setStyle("overImage",deleteOverClass);
				clickBtn.addEventListener(MouseEvent.CLICK,deleteBtn_clickHandler);
				hgroup.addElement(clickBtn);
				passGroup.addElement(hgroup);
			}
			
			protected function resetBtn_clickHandler(event:MouseEvent):void
			{
				_pickerArray = [];
				_id2passPtTable.clear();
				_passInput2passPtId.clear();
				startInput.text = "";
				endInput.text = "";
				passGroup.removeAllElements();
				_drawTool.deactivate();
				
				startInput.enabled = true;
				startPicker.enabled = true;
				barrierPicker.enabled = true;
				addPassButton.enabled = true;
				endInput.enabled = true;
				endPicker.enabled = true;
				
				faultLabel.text = "";
				
				dispatchEvent(new NAEvent(NAEvent.RESET_AND_CLEANALL_EVENT));
			}
			
			/**
			 * 执行搜索
			 **/
			public function submitSearch():void
			{
				//验证输入信息是否完善
				var startText:String = StringUtil.trim(startInput.text);
				if(startText == "")
				{
					Alert.show("请您确定起点");
					return;
				}
				var endText:String = StringUtil.trim(endInput.text);
				if(endText == "")
				{
					Alert.show("请您确定终点");
					return;
				}
				var passInputs:Array = _passInput2passPtId.getKeySet();
				
				//获取途经点信息，记录下每个途经点的输入框的名字和其passid
				var passInfos:Array = [];
				for each(var checkBtn:CheckButton in _pickerArray)
				{
					var passInput:CompletionInput = checkBtn.parent.getChildAt(1) as CompletionInput;
					var passText:String = StringUtil.trim(passInput.text);
					if(passText == "")
					{
						Alert.show("您还有一个途经点没有确定");
						return;
					}
					var passid:int = _passInput2passPtId.find(passInput);
					passInfos.push({passname:passInput.text,passid:passid});
				}
				
				var submitInfo:SubmitInfo = new SubmitInfo();
				submitInfo.startName = startText;
				submitInfo.endName = endText;
				submitInfo.passInfos = passInfos;
				
				costRadioGroup.selectedValue == "time"? submitInfo.impedanceType = SubmitInfo.IMPEDANCETYPE_TIME:
					submitInfo.impedanceType = SubmitInfo.IMPEDANCETYPE_DISTANCE;
				
				submitInfo.noHighWay = highwayCheck.selected;
				
				var naEvent:NAEvent = new NAEvent(NAEvent.SUBMIT_EVENT);
				naEvent.submitInfo = submitInfo;
				
				faultLabel.text = "";
				
				dispatchEvent(naEvent);
			}
			
			protected function searchBtn_clickHandler(event:MouseEvent):void
			{
				submitSearch();
			}
			
			/**
			 * 无效的起点查询关键字
			 **/
			public function invalidStartKeyWords():void
			{
				startInput.setStyle("color","0xff0000");
				startInput.setStyle("fontWeight","bold");
				startInput.text = "查询关键字无效";
			}
			
			protected function startInput_focusInHandler(event:FocusEvent):void
			{
				startInput.setStyle("color","0x000000");
				startInput.setStyle("fontWeight","normal");
			}
			
			/**
			 * 无效的终点查询关键字
			 **/
			public function invalidEndKeyWords():void
			{
				endInput.setStyle("color","0xff0000");
				endInput.setStyle("fontWeight","bold");
				endInput.text = "查询关键字无效";
			}
			
			protected function endInput_focusInHandler(event:FocusEvent):void
			{
				endInput.setStyle("color","0x000000");
				endInput.setStyle("fontWeight","normal");
			}
			
			/**
			 * 无效的途经点查询关键字
			 * @param passInfo 
			 **/
			public function invalidPassKeyWords(passInfos:Array):void
			{
				//前面已经验证的，禁止用户再更改
				startInput.enabled = false;
				startPicker.enabled = false;
				barrierPicker.enabled = false;
				addPassButton.enabled = false;
//				_passInput2passPtId.clear();
				
				var len:int = passInfos.length;
				for(var i:int = 0;i<len;i++)
				{
					var passinfo:Object = passInfos[i];
					var btn:CheckButton = _pickerArray[i];
					var input:CompletionInput = btn.parent.getChildAt(1) as CompletionInput;
					input.text = passinfo.passname;
					if(passinfo.passid<1)
					{
						//说明无效
						input.setStyle("color","0xff0000");
						input.setStyle("fontWeight","bold");
						input.text = "查询关键字无效";
						return;
					}
					else
					{
						_passInput2passPtId.remove(input);
						_passInput2passPtId.add(input,passinfo.passid);
						btn.enabled = false;
						input.enabled = false;
						var deleteBtn:ClickButton = btn.parent.getChildAt(3) as ClickButton;
						deleteBtn.enabled = false;
					}
				}
				
				
//				startInput.setStyle("color","0xff0000");
//				startInput.setStyle("fontWeight","bold");
//				startInput.text = "查询关键字无效";
			}
			
			protected function passInput_focusInHandler(event:FocusEvent):void
			{
				var input:CompletionInput = event.currentTarget as CompletionInput;
				input.setStyle("color","0x000000");
				input.setStyle("fontWeight","normal");
			}
			
			/**
			 * 释放绘制工具
			 **/
			public function releaseDrawTool():void
			{
				_drawTool.deactivate();
				startPicker.checked = false;
				endPicker.checked = false;
				
				for each(var btn:CheckButton in _pickerArray)
				{
					btn.checked = false;
				}
			}
			
			/**
			 * 锁定用户输入
			 **/
			public function lockInput(submitInfo:SubmitInfo):void
			{
				startInput.enabled = false;
				startPicker.enabled = false;
				barrierPicker.enabled = false;
				addPassButton.enabled = false;
				endInput.enabled = false;
				endPicker.enabled = false;
				
				startInput.text = submitInfo.startName;
				endInput.text = submitInfo.endName;
				
				var passInfos:Array = submitInfo.passInfos;
				
				var len:int = passInfos.length;
				for(var i:int = 0;i<len;i++)
				{
					var passinfo:Object = passInfos[i];
					var btn:CheckButton = _pickerArray[i];
					var input:CompletionInput = btn.parent.getChildAt(1) as CompletionInput;
					input.text = passinfo.passname;
					_passInput2passPtId.remove(input);
					_passInput2passPtId.add(input,passinfo.passid);
					btn.enabled = false;
					input.enabled = false;
					var deleteBtn:ClickButton = btn.parent.getChildAt(3) as ClickButton;
					deleteBtn.enabled = false;
				}
				
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
		<s:RadioButtonGroup id="costRadioGroup"/>
	</fx:Declarations>
	<s:VGroup left="50" right="50" gap="10">
		<s:HGroup width="100%" height="100%" gap="10">
			<s:Image source="assets/images/transfer/startInput.png"/>
			<ui:CompletionInput id="startInput"  width="100%" color="0x000000"
								 keepLocalHistory="false" fontFamily="宋体"
								 completionFunction="{queryAssetWords}" focusIn="startInput_focusInHandler(event)"/>
			<customskinbutton:CheckButton id="startPicker"
										  normalImage="{pickerNormalClass}"
										  overImage="{pickerOverClass}"
										  selectedImage="{pickerSelectedClass}"
										  checkChange="startPicker_checkChangeHandler(event)"/>
		</s:HGroup>
		<s:VGroup id="passGroup" width="100%" gap="10"/>
		<s:HGroup width="100%" gap="10">
			<s:Image source="assets/images/transfer/endInput.png"/>
			<ui:CompletionInput id="endInput"  width="100%" color="0x000000"
								 keepLocalHistory="false" fontFamily="宋体"
								 completionFunction="{queryAssetWords}" focusIn="endInput_focusInHandler(event)"/>
			<customskinbutton:CheckButton id="endPicker"
										  normalImage="{pickerNormalClass}"
										  overImage="{pickerOverClass}"
										  selectedImage="{pickerSelectedClass}"
										  checkChange="endPicker_checkChangeHandler(event)"/>
		</s:HGroup>
		<s:HGroup>
			<customskinbutton:ClickButton normalImage="@Embed('assets/images/networkanalyst/pass_normal.png')"
										  overImage="@Embed('assets/images/networkanalyst/pass_over.png')"
										  id="addPassButton"
										  click="addPassButton_clickHandler(event)"/>
			<customskinbutton:CheckButton id="barrierPicker"
										  normalImage="@Embed('assets/images/networkanalyst/barrier_normal.png')"
										  overImage="@Embed('assets/images/networkanalyst/barrier_over.png')"
										  selectedImage="@Embed('assets/images/networkanalyst/barrier_checked.png')"
										  checkChange="barrierPicker_checkChangeHandler(event)"/>
		</s:HGroup>
		<s:Group width="100%" fontFamily="宋体">
			<s:RadioButton id="timeRadio" label="时间最短" selected="true" left="0" verticalCenter="0"
						   value="time" groupName="costRadioGroup"/>
			<s:RadioButton id="distanceRadio" label="距离最短" verticalCenter="0" horizontalCenter="0"
						   value="distance" groupName="costRadioGroup"/>
			<s:CheckBox id="highwayCheck" label="不走高速" verticalCenter="0" right="0"/>
		</s:Group>
		<s:Spacer height="15"/>
		<s:HGroup width="100%" gap="20" horizontalAlign="center" verticalAlign="middle">
<!--			<s:Button label="搜索" id="searchBtn" click="searchBtn_clickHandler(event)"/>-->
			<customskinbutton:ClickButton normalImage="{searchNormalClass}"
										  overImage="{searchOverClass}"
										  click="searchBtn_clickHandler(event)"/>
			<!--<s:Button label="重置" id="resetBtn" click="resetBtn_clickHandler(event)"/>-->
			<s:Label text="重 置" click="resetBtn_clickHandler(event)" rollOver="{resetBtn.setStyle('fontWeight','bold')}"
					 rollOut="{resetBtn.setStyle('fontWeight','normal')}" id="resetBtn" buttonMode="true"
					 color="#4061ad" fontFamily="宋体" fontSize="13" textDecoration="underline" baselineShift="2"/>
		</s:HGroup>
		<!--<s:Line width="100%">
			<s:stroke>
				<s:SolidColorStroke color="0xffffff"/>
			</s:stroke>
		</s:Line>-->
		
		<s:Label id="faultLabel" width="100%" fontFamily="宋体" fontSize="12" color="0x4a535f"/>
		
	</s:VGroup>
	
</s:Group>
