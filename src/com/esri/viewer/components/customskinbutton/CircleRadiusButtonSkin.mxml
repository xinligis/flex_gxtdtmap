<?xml version="1.0" encoding="utf-8"?>

<!--

    ADOBE SYSTEMS INCORPORATED
    Copyright 2008 Adobe Systems Incorporated
    All Rights Reserved.

    NOTICE: Adobe permits you to use, modify, and distribute this file
    in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for the Spark Button component.  

       @see spark.components.Button
        
      @langversion 3.0
      @playerversion Flash 10
      @playerversion AIR 1.5
      @productversion Flex 4
-->
<s:SparkButtonSkin xmlns:fx="http://ns.adobe.com/mxml/2009" 
             xmlns:s="library://ns.adobe.com/flex/spark" 
             xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
             alpha.disabled="0.5">
     
    <fx:Metadata>
        <![CDATA[ 
        /** 
         * @copy spark.skins.spark.ApplicationSkin#hostComponent
         */
        [HostComponent("spark.components.Button")]
        ]]>
    </fx:Metadata>
    
    <fx:Script fb:purpose="styling">
        <![CDATA[         
            import spark.components.Group;
            /* Define the skin elements that should not be colorized. 
            For button, the graphics are colorized but the label is not. */
            static private const exclusions:Array = ["labelDisplay"];
            
            /** 
             * @private
             */     
            override public function get colorizeExclusions():Array {return exclusions;}
            
            /**
             * @private
             */
            override protected function initializationComplete():void
            {
                useChromeColor = false;
                super.initializationComplete();
            }  
            
            /**
             *  @private
             */
            override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void
            {
				
//				var icon:Class = null;
//				
//				icon = hostComponent.getStyle("buttonIcon");
//				
//				if(icon != null)
//				{
//					incoImage.visible = true;
//					incoImage.includeInLayout = true;
//					incoImage.source = icon;
//					trace("ok")
//				}
//				else
//				{
//					incoImage.visible = false;
//					incoImage.includeInLayout = false;
//				}
                super.updateDisplayList(unscaledWidth, unscaledHeight);
            }
            
            private var cornerRadius:Number = 2;
                                 
        ]]>        
    </fx:Script>
        
    <!-- states -->
    <s:states>
        <s:State name="up" />
        <s:State name="over" />
        <s:State name="down" />
        <s:State name="disabled" />
    </s:states>

	<s:Group top="0" bottom="0" left="0" right="0" minWidth="75" minHeight="25">
		<!--外描边-->
		<s:Rect top="0" bottom="0" left="0" right="0" radiusX="10" radiusY="10">
			<s:fill>
				<s:SolidColor color="#b0b6bb"
							  color.over="#a2aab0"
							  color.down="#b0b6bb"/>
			</s:fill>
		</s:Rect>
		<!--内描边-->
		<s:Rect top="1" bottom="1" left="1" right="1" radiusX="10" radiusY="10">
			<s:fill>
				<s:SolidColor color="#e8f4ff"
							  color.over="#eef7ff"
							  color.down="#e8f4ff"/>
			</s:fill>
		</s:Rect>
		<s:Rect top="2" bottom="2" left="2" right="2" radiusX="10" radiusY="10">
			<s:fill>
				<s:LinearGradient rotation="90">
					<s:GradientEntry color="#e9f4ff"
									 color.over="#f1f8ff"
									 color.down="#e9f4ff"/>
					<s:GradientEntry color="#9fcdf9"
									 color.over="#ddeeff"
									 color.down="#9fcdf9"/>
					<s:GradientEntry color="#e8f4ff"
									 color.over="#b0d8ff"
									 color.down="#e8f4ff"/>
				</s:LinearGradient>
			</s:fill>
		</s:Rect>
		<!--visible="false" includeInLayout="false"-->
		<s:Label id="labelDisplay" fontFamily="宋体" color="#081e3b" verticalCenter="0"
				 textAlign="center" verticalAlign="middle"
				 top="5" bottom="5" left="10" right="10"
				 maxDisplayedLines="1">
		</s:Label>
	</s:Group>
</s:SparkButtonSkin>
